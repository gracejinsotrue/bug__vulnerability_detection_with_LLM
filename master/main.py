from agents.debugging_agent import create_debugging_agent
from dotenv import load_dotenv
from pydantic import BaseModel, Field
from typing import Union
import os
import re

def parse_input(user_input: str):
    match = re.search(r"file_path='(.*?)', line_number=(\d+)", user_input)
    if not match:
        raise ValueError("Invalid input format. Expected format: file_path='<path>', line_number=<number>")
    file_path, line_number = match.groups()
    return {"file_path": file_path, "line_number": int(line_number)}

def main():
    load_dotenv()

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("OpenAI API key not found. Please set it in the environment variables or .env file.")

    agent_executor = create_debugging_agent()

    user_input = "Retrieve source code at file_path='example.py', line_number=4"
    if "Retrieve source code" in user_input:
        parsed_input = parse_input(user_input)
        response = agent_executor.invoke(parsed_input)
    else:
        response = agent_executor.invoke({"user_input": user_input})
    print(response)

    user_input = "Find callers of function_name='process_data'"
    response = agent_executor.invoke({"user_input": user_input})
    print(response)

    user_input = "Step forward in the debugger"
    response = agent_executor.invoke({"user_input": user_input})
    print(response)

    user_input = "Step backward in the debugger"
    response = agent_executor.invoke({"user_input": user_input})
    print(response)

if __name__ == "__main__":
    main()
