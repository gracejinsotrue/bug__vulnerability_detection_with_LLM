{
    "messages": [
        {
            "role": "system",
            "content": "You are an expert in software security vulnerabilities and CWE classifications."
        },
        {
            "role": "user",
            "content": "CWE-22 Details:\nH2: CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nTABLE: Weakness ID: 22Vulnerability Mapping:ALLOWEDThis CWE ID may be used to map to real-world vulnerabilitiesAbstraction:BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTR: Weakness ID: 22Vulnerability Mapping:ALLOWEDThis CWE ID may be used to map to real-world vulnerabilitiesAbstraction:BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: Weakness ID: 22Vulnerability Mapping:ALLOWEDThis CWE ID may be used to map to real-world vulnerabilitiesAbstraction:BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nH2: Edit Custom Filter\nP: Many file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.\nP: In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\nTABLE: Directory traversalPath traversal:\"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\nTR: Directory traversal\nTD: \nTR: Path traversal:\"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\nTD: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\nTABLE: NatureTypeIDNameChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.668Exposure of Resource to Wrong SphereChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.706Use of Incorrectly-Resolved Name or ReferenceParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.23Relative Path TraversalParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.36Absolute Path TraversalCanFollowClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.20Improper Input ValidationCanFollowBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.73External Control of File Name or PathCanFollowClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.172Encoding Error\nTR: NatureTypeIDName\nTR: ChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.668Exposure of Resource to Wrong Sphere\nTD: ChildOf\nTD: Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.\nTD: 668\nTD: Exposure of Resource to Wrong Sphere\nTR: ChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.706Use of Incorrectly-Resolved Name or Reference\nTD: ChildOf\nTD: Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.\nTD: 706\nTD: Use of Incorrectly-Resolved Name or Reference\nTR: ParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.23Relative Path Traversal\nTD: ParentOf\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 23\nTD: Relative Path Traversal\nTR: ParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.36Absolute Path Traversal\nTD: ParentOf\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 36\nTD: Absolute Path Traversal\nTR: CanFollowClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.20Improper Input Validation\nTD: CanFollow\nTD: Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.\nTD: 20\nTD: Improper Input Validation\nTR: CanFollowBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.73External Control of File Name or Path\nTD: CanFollow\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 73\nTD: External Control of File Name or Path\nTR: CanFollowClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.172Encoding Error\nTD: CanFollow\nTD: Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.\nTD: 172\nTD: Encoding Error\nTABLE: NatureTypeIDNameMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1219File Handling Issues\nTR: NatureTypeIDName\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1219File Handling Issues\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1219\nTD: File Handling Issues\nTABLE: NatureTypeIDNameChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.706Use of Incorrectly-Resolved Name or Reference\nTR: NatureTypeIDName\nTR: ChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.706Use of Incorrectly-Resolved Name or Reference\nTD: ChildOf\nTD: Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.\nTD: 706\nTD: Use of Incorrectly-Resolved Name or Reference\nTABLE: NatureTypeIDNameParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.23Relative Path TraversalParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.36Absolute Path Traversal\nTR: NatureTypeIDName\nTR: ParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.23Relative Path Traversal\nTD: ParentOf\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 23\nTD: Relative Path Traversal\nTR: ParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.36Absolute Path Traversal\nTD: ParentOf\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 36\nTD: Absolute Path Traversal\nTABLE: NatureTypeIDNameParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.23Relative Path TraversalParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.36Absolute Path Traversal\nTR: NatureTypeIDName\nTR: ParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.23Relative Path Traversal\nTD: ParentOf\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 23\nTD: Relative Path Traversal\nTR: ParentOfBase - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.36Absolute Path Traversal\nTD: ParentOf\nTD: Base - a weakness \nthat is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\nTD: 36\nTD: Absolute Path Traversal\nTABLE: PhaseNoteImplementation\nTR: PhaseNote\nTR: Implementation\nTD: Implementation\nTD: \nP: Languages\nP: Class: Not Language-Specific(Undetermined Prevalence)\nTABLE: ScopeImpactLikelihoodIntegrityConfidentialityAvailabilityTechnical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.IntegrityTechnical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.ConfidentialityTechnical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.AvailabilityTechnical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.\nTR: ScopeImpactLikelihood\nTR: IntegrityConfidentialityAvailabilityTechnical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nTD: IntegrityConfidentialityAvailability\nTD: Technical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nP: Technical Impact:Execute Unauthorized Code or Commands\nTD: \nTR: IntegrityTechnical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nTD: Integrity\nTD: Technical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nP: Technical Impact:Modify Files or Directories\nTD: \nTR: ConfidentialityTechnical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nTD: Confidentiality\nTD: Technical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nP: Technical Impact:Read Files or Directories\nTD: \nTR: AvailabilityTechnical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.\nTD: Availability\nTD: Technical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.\nP: Technical Impact:DoS: Crash, Exit, or Restart\nTD: \nP: Example 1\nP: The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.\nP: While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as:\nP: The program would generate a profile pathname like this:\nP: When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file:\nP: As a result, the attacker could read the entire text of the password file.\nP: Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.\nP: Example 2\nP: In the example below, the path to a dictionary file is read from a system property and used to initialize a File object.\nP: However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.\nP: Example 3\nP: The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.\nP: Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:\nP: will have the first \"../\" stripped, resulting in:\nP: This value is then concatenated with the /home/user/ directory:\nP: which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).\nP: Example 4\nP: The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\".\nP: An attacker could provide an input such as this:\nP: The software assumes that the path is valid because it starts with the \"/safe_path/\" sequence, but the \"../\" sequence will cause the program to delete the important.dat file in the parent directory\nP: Example 5\nP: The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.\nP: When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.\nP: This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.\nP: Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.\nP: Example 6\nP: This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user.\nP: However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file.\nP: The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/user/documents, and the user inputs /etc/passwd, the resulting path will be /home/user/documents/etc/passwd. The user is therefore contained within the current working directory as intended.\nTABLE: ReferenceDescriptionCVE-2022-45918Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)CVE-2019-20916Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"CVE-2022-31503Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.CVE-2022-24877directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml fileCVE-2021-21972Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.CVE-2020-4053a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directoryCVE-2020-3452Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.CVE-2019-10743Go-based archive library allows extraction of files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"CVE-2010-0467Newsletter module allows reading arbitrary files using \"../\" sequences.CVE-2006-7079Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)CVE-2009-4194FTP server allows deletion of arbitrary files using \"..\" in the DELE command.CVE-2009-4053FTP server allows creation of arbitrary directories using \"..\" in the MKD command.CVE-2009-0244FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences.CVE-2009-4013Software package maintenance program allows overwriting arbitrary files using \"../\" sequences.CVE-2009-4449Bulletin board allows attackers to determine the existence of files using the avatar.CVE-2009-4581PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.CVE-2010-0012Overwrite of files using a .. in a Torrent file.CVE-2010-0013Chat program allows overwriting files using a custom smiley request.CVE-2008-5748Chain: external control of values for user's desired language and theme enables path traversal.CVE-2009-1936Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.\nTR: ReferenceDescription\nTR: CVE-2022-45918Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\nTD: CVE-2022-45918\nTD: Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\nTR: CVE-2019-20916Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\nTD: CVE-2019-20916\nTD: Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\nTR: CVE-2022-31503Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.\nTD: CVE-2022-31503\nTD: Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.\nTR: CVE-2022-24877directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file\nTD: CVE-2022-24877\nTD: directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file\nTR: CVE-2021-21972Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.\nTD: CVE-2021-21972\nTD: Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.\nTR: CVE-2020-4053a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directory\nTD: CVE-2020-4053\nTD: a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directory\nTR: CVE-2020-3452Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.\nTD: CVE-2020-3452\nTD: Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.\nTR: CVE-2019-10743Go-based archive library allows extraction of files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"\nTD: CVE-2019-10743\nTD: Go-based archive library allows extraction of files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"\nTR: CVE-2010-0467Newsletter module allows reading arbitrary files using \"../\" sequences.\nTD: CVE-2010-0467\nTD: Newsletter module allows reading arbitrary files using \"../\" sequences.\nTR: CVE-2006-7079Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)\nTD: CVE-2006-7079\nTD: Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)\nTR: CVE-2009-4194FTP server allows deletion of arbitrary files using \"..\" in the DELE command.\nTD: CVE-2009-4194\nTD: FTP server allows deletion of arbitrary files using \"..\" in the DELE command.\nTR: CVE-2009-4053FTP server allows creation of arbitrary directories using \"..\" in the MKD command.\nTD: CVE-2009-4053\nTD: FTP server allows creation of arbitrary directories using \"..\" in the MKD command.\nTR: CVE-2009-0244FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences.\nTD: CVE-2009-0244\nTD: FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences.\nTR: CVE-2009-4013Software package maintenance program allows overwriting arbitrary files using \"../\" sequences.\nTD: CVE-2009-4013\nTD: Software package maintenance program allows overwriting arbitrary files using \"../\" sequences.\nTR: CVE-2009-4449Bulletin board allows attackers to determine the existence of files using the avatar.\nTD: CVE-2009-4449\nTD: Bulletin board allows attackers to determine the existence of files using the avatar.\nTR: CVE-2009-4581PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.\nTD: CVE-2009-4581\nTD: PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.\nTR: CVE-2010-0012Overwrite of files using a .. in a Torrent file.\nTD: CVE-2010-0012\nTD: Overwrite of files using a .. in a Torrent file.\nTR: CVE-2010-0013Chat program allows overwriting files using a custom smiley request.\nTD: CVE-2010-0013\nTD: Chat program allows overwriting files using a custom smiley request.\nTR: CVE-2008-5748Chain: external control of values for user's desired language and theme enables path traversal.\nTD: CVE-2008-5748\nTD: Chain: external control of values for user's desired language and theme enables path traversal.\nTR: CVE-2009-1936Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.\nTD: CVE-2009-1936\nTD: Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.\nTABLE: Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as \"/\" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23,CWE-59). This includes:realpath() in CgetCanonicalPath() in JavaGetFullPath() in ASP.NETrealpath() or abs_path() in Perlrealpath() in PHPPhase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.Phases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.\nTR: Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as \"/\" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nTD: Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as \"/\" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nP: Phase:  Implementation\nP: Strategy:  Input Validation\nP: Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\nP: When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\nP: Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nP: When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as \"/\" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.\nP: Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nTR: Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nTD: Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nP: Phase:  Architecture and Design\nTR: Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23,CWE-59). This includes:realpath() in CgetCanonicalPath() in JavaGetFullPath() in ASP.NETrealpath() or abs_path() in Perlrealpath() in PHP\nTD: Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23,CWE-59). This includes:realpath() in CgetCanonicalPath() in JavaGetFullPath() in ASP.NETrealpath() or abs_path() in Perlrealpath() in PHP\nP: Phase:  Implementation\nP: Strategy:  Input Validation\nP: Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nP: Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23,CWE-59). This includes:\nUL: realpath() in CgetCanonicalPath() in JavaGetFullPath() in ASP.NETrealpath() or abs_path() in Perlrealpath() in PHP\nLI: realpath() in C\nLI: getCanonicalPath() in Java\nLI: GetFullPath() in ASP.NET\nLI: realpath() or abs_path() in Perl\nLI: realpath() in PHP\nTR: Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nTD: Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nP: Phase:  Architecture and Design\nP: Strategy:  Libraries or Frameworks\nTR: Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.\nTD: Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.\nP: Phase:  Operation\nP: Strategy:  Firewall\nP: Effectiveness: Moderate\nTR: Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nTD: Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nP: Phases:  Architecture and Design; Operation\nP: Strategy:  Environment Hardening\nTR: Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nTD: Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nP: Phase:  Architecture and Design\nP: Strategy:  Enforcement by Conversion\nP: When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nP: For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nTR: Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.\nTD: Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.\nP: Phases:  Architecture and Design; Operation\nP: Strategy:  Sandbox or Jail\nP: Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\nP: OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\nP: This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\nP: Be careful to avoidCWE-243and other weaknesses related to jails.\nP: Effectiveness: Limited\nTR: Phases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\nTD: Phases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\nP: Phases:  Architecture and Design; Operation\nP: Strategy:  Attack Surface Reduction\nP: Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\nP: This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\nTR: Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.\nTD: Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.\nP: Phase:  Implementation\nP: Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\nP: If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\nP: Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nP: In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.\nTR: Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.\nTD: Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.\nP: Phases:  Operation; Implementation\nP: Strategy:  Environment Hardening\nTABLE: OrdinalityDescriptionPrimary(where the weakness exists independent of other weaknesses)Resultant(where the weakness is typically related to the presence of some other weaknesses)\nTR: OrdinalityDescription\nTR: Primary(where the weakness exists independent of other weaknesses)\nTD: Primary\nTD: (where the weakness exists independent of other weaknesses)\nTR: Resultant(where the weakness is typically related to the presence of some other weaknesses)\nTD: Resultant\nTD: (where the weakness is typically related to the presence of some other weaknesses)\nTABLE: Automated Static AnalysisAutomated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.Effectiveness: HighManual Static AnalysisManual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.Effectiveness: HighAutomated Static Analysis - Binary or BytecodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Bytecode Weakness Analysis - including disassembler + source code weakness analysisCost effective for partial coverage:Binary Weakness Analysis - including disassembler + source code weakness analysisEffectiveness: HighManual Static Analysis - Binary or BytecodeAccording to SOAR, the following detection techniques may be useful:Cost effective for partial coverage:Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomaliesEffectiveness: SOAR PartialDynamic Analysis with Automated Results InterpretationAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Web Application ScannerWeb Services ScannerDatabase ScannersEffectiveness: HighDynamic Analysis with Manual Results InterpretationAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Fuzz TesterFramework-based FuzzerEffectiveness: HighManual Static Analysis - Source CodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Manual Source Code Review (not inspections)Cost effective for partial coverage:Focused Manual Spotcheck - Focused manual analysis of sourceEffectiveness: HighAutomated Static Analysis - Source CodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Source code Weakness AnalyzerContext-configured Source Code Weakness AnalyzerEffectiveness: HighArchitecture or Design ReviewAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Formal Methods / Correct-By-ConstructionCost effective for partial coverage:Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)Effectiveness: High\nTR: Automated Static AnalysisAutomated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.Effectiveness: High\nTD: Automated Static AnalysisAutomated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.Effectiveness: High\nP: Automated Static Analysis\nP: Effectiveness: High\nTR: Manual Static AnalysisManual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.Effectiveness: High\nTD: Manual Static AnalysisManual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.Effectiveness: High\nP: Manual Static Analysis\nP: Effectiveness: High\nTR: Automated Static Analysis - Binary or BytecodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Bytecode Weakness Analysis - including disassembler + source code weakness analysisCost effective for partial coverage:Binary Weakness Analysis - including disassembler + source code weakness analysisEffectiveness: High\nTD: Automated Static Analysis - Binary or BytecodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Bytecode Weakness Analysis - including disassembler + source code weakness analysisCost effective for partial coverage:Binary Weakness Analysis - including disassembler + source code weakness analysisEffectiveness: High\nP: Automated Static Analysis - Binary or Bytecode\nP: According to SOAR, the following detection techniques may be useful:\nUL: Bytecode Weakness Analysis - including disassembler + source code weakness analysis\nLI: Bytecode Weakness Analysis - including disassembler + source code weakness analysis\nUL: Binary Weakness Analysis - including disassembler + source code weakness analysis\nLI: Binary Weakness Analysis - including disassembler + source code weakness analysis\nP: Effectiveness: High\nTR: Manual Static Analysis - Binary or BytecodeAccording to SOAR, the following detection techniques may be useful:Cost effective for partial coverage:Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomaliesEffectiveness: SOAR Partial\nTD: Manual Static Analysis - Binary or BytecodeAccording to SOAR, the following detection techniques may be useful:Cost effective for partial coverage:Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomaliesEffectiveness: SOAR Partial\nP: Manual Static Analysis - Binary or Bytecode\nP: According to SOAR, the following detection techniques may be useful:\nUL: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nLI: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nP: Effectiveness: SOAR Partial\nTR: Dynamic Analysis with Automated Results InterpretationAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Web Application ScannerWeb Services ScannerDatabase ScannersEffectiveness: High\nTD: Dynamic Analysis with Automated Results InterpretationAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Web Application ScannerWeb Services ScannerDatabase ScannersEffectiveness: High\nP: Dynamic Analysis with Automated Results Interpretation\nP: According to SOAR, the following detection techniques may be useful:\nUL: Web Application ScannerWeb Services ScannerDatabase Scanners\nLI: Web Application Scanner\nLI: Web Services Scanner\nLI: Database Scanners\nP: Effectiveness: High\nTR: Dynamic Analysis with Manual Results InterpretationAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Fuzz TesterFramework-based FuzzerEffectiveness: High\nTD: Dynamic Analysis with Manual Results InterpretationAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Fuzz TesterFramework-based FuzzerEffectiveness: High\nP: Dynamic Analysis with Manual Results Interpretation\nP: According to SOAR, the following detection techniques may be useful:\nUL: Fuzz TesterFramework-based Fuzzer\nLI: Fuzz Tester\nLI: Framework-based Fuzzer\nP: Effectiveness: High\nTR: Manual Static Analysis - Source CodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Manual Source Code Review (not inspections)Cost effective for partial coverage:Focused Manual Spotcheck - Focused manual analysis of sourceEffectiveness: High\nTD: Manual Static Analysis - Source CodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Manual Source Code Review (not inspections)Cost effective for partial coverage:Focused Manual Spotcheck - Focused manual analysis of sourceEffectiveness: High\nP: Manual Static Analysis - Source Code\nP: According to SOAR, the following detection techniques may be useful:\nUL: Manual Source Code Review (not inspections)\nLI: Manual Source Code Review (not inspections)\nUL: Focused Manual Spotcheck - Focused manual analysis of source\nLI: Focused Manual Spotcheck - Focused manual analysis of source\nP: Effectiveness: High\nTR: Automated Static Analysis - Source CodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Source code Weakness AnalyzerContext-configured Source Code Weakness AnalyzerEffectiveness: High\nTD: Automated Static Analysis - Source CodeAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Source code Weakness AnalyzerContext-configured Source Code Weakness AnalyzerEffectiveness: High\nP: Automated Static Analysis - Source Code\nP: According to SOAR, the following detection techniques may be useful:\nUL: Source code Weakness AnalyzerContext-configured Source Code Weakness Analyzer\nLI: Source code Weakness Analyzer\nLI: Context-configured Source Code Weakness Analyzer\nP: Effectiveness: High\nTR: Architecture or Design ReviewAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Formal Methods / Correct-By-ConstructionCost effective for partial coverage:Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)Effectiveness: High\nTD: Architecture or Design ReviewAccording to SOAR, the following detection techniques may be useful:Highly cost effective:Formal Methods / Correct-By-ConstructionCost effective for partial coverage:Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)Effectiveness: High\nP: Architecture or Design Review\nP: According to SOAR, the following detection techniques may be useful:\nUL: Formal Methods / Correct-By-Construction\nLI: Formal Methods / Correct-By-Construction\nUL: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nLI: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nP: Effectiveness: High\nUL: File Processing\nLI: File Processing\nUL: File or Directory\nLI: File or Directory\nTABLE: NatureTypeIDNameMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).635Weaknesses Originally Used by NVD from 2008 to 2016MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.715OWASP Top Ten 2007 Category A4 - Insecure Direct Object ReferenceMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.723OWASP Top Ten 2004 Category A2 - Broken Access ControlMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.743CERT C Secure Coding Standard (2008) Chapter 10 - Input Output (FIO)MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.8022010 Top 25 - Risky Resource ManagementMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.813OWASP Top Ten 2010 Category A4 - Insecure Direct Object ReferencesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.8652011 Top 25 - Risky Resource ManagementMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.877CERT C++ Secure Coding Section 09 - Input Output (FIO)MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).884CWE Cross-sectionMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.932OWASP Top Ten 2013 Category A4 - Insecure Direct Object ReferencesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.981SFP Secondary Cluster: Path TraversalMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1031OWASP Top Ten 2017 Category A5 - Broken Access ControlMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1131CISQ Quality Measures (2016) - SecurityMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1179SEI CERT Perl Coding Standard - Guidelines 01. Input Validation and Data Sanitization (IDS)MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1200Weaknesses in the 2019 CWE Top 25 Most Dangerous Software ErrorsMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1308CISQ Quality Measures - SecurityMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1337Weaknesses in the 2021 CWE Top 25 Most Dangerous Software WeaknessesMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1340CISQ Data Protection MeasuresMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1345OWASP Top Ten 2021 Category A01:2021 - Broken Access ControlMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1350Weaknesses in the 2020 CWE Top 25 Most Dangerous Software WeaknessesMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1387Weaknesses in the 2022 CWE Top 25 Most Dangerous Software WeaknessesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1404Comprehensive Categorization: File HandlingMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1425Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weaknesses\nTR: NatureTypeIDName\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).635Weaknesses Originally Used by NVD from 2008 to 2016\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 635\nTD: Weaknesses Originally Used by NVD from 2008 to 2016\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.715OWASP Top Ten 2007 Category A4 - Insecure Direct Object Reference\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 715\nTD: OWASP Top Ten 2007 Category A4 - Insecure Direct Object Reference\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.723OWASP Top Ten 2004 Category A2 - Broken Access Control\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 723\nTD: OWASP Top Ten 2004 Category A2 - Broken Access Control\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.743CERT C Secure Coding Standard (2008) Chapter 10 - Input Output (FIO)\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 743\nTD: CERT C Secure Coding Standard (2008) Chapter 10 - Input Output (FIO)\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.8022010 Top 25 - Risky Resource Management\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 802\nTD: 2010 Top 25 - Risky Resource Management\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.813OWASP Top Ten 2010 Category A4 - Insecure Direct Object References\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 813\nTD: OWASP Top Ten 2010 Category A4 - Insecure Direct Object References\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.8652011 Top 25 - Risky Resource Management\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 865\nTD: 2011 Top 25 - Risky Resource Management\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.877CERT C++ Secure Coding Section 09 - Input Output (FIO)\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 877\nTD: CERT C++ Secure Coding Section 09 - Input Output (FIO)\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).884CWE Cross-section\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 884\nTD: CWE Cross-section\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.932OWASP Top Ten 2013 Category A4 - Insecure Direct Object References\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 932\nTD: OWASP Top Ten 2013 Category A4 - Insecure Direct Object References\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.981SFP Secondary Cluster: Path Traversal\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 981\nTD: SFP Secondary Cluster: Path Traversal\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1031OWASP Top Ten 2017 Category A5 - Broken Access Control\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1031\nTD: OWASP Top Ten 2017 Category A5 - Broken Access Control\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1131CISQ Quality Measures (2016) - Security\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1131\nTD: CISQ Quality Measures (2016) - Security\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1179SEI CERT Perl Coding Standard - Guidelines 01. Input Validation and Data Sanitization (IDS)\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1179\nTD: SEI CERT Perl Coding Standard - Guidelines 01. Input Validation and Data Sanitization (IDS)\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1200Weaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 1200\nTD: Weaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1308CISQ Quality Measures - Security\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1308\nTD: CISQ Quality Measures - Security\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1337Weaknesses in the 2021 CWE Top 25 Most Dangerous Software Weaknesses\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 1337\nTD: Weaknesses in the 2021 CWE Top 25 Most Dangerous Software Weaknesses\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1340CISQ Data Protection Measures\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 1340\nTD: CISQ Data Protection Measures\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1345OWASP Top Ten 2021 Category A01:2021 - Broken Access Control\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1345\nTD: OWASP Top Ten 2021 Category A01:2021 - Broken Access Control\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1350Weaknesses in the 2020 CWE Top 25 Most Dangerous Software Weaknesses\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 1350\nTD: Weaknesses in the 2020 CWE Top 25 Most Dangerous Software Weaknesses\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1387Weaknesses in the 2022 CWE Top 25 Most Dangerous Software Weaknesses\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 1387\nTD: Weaknesses in the 2022 CWE Top 25 Most Dangerous Software Weaknesses\nTR: MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1404Comprehensive Categorization: File Handling\nTD: MemberOf\nTD: Category - a CWE entry that contains a set of other entries that share a common characteristic.\nTD: 1404\nTD: Comprehensive Categorization: File Handling\nTR: MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1425Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weaknesses\nTD: MemberOf\nTD: View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).\nTD: 1425\nTD: Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weaknesses\nTABLE: Usage:ALLOWED(this CWE ID could be used to map to real-world vulnerabilities)Reason:Acceptable-UseRationale:This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.Comments:Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\nTR: Usage:ALLOWED(this CWE ID could be used to map to real-world vulnerabilities)\nTD: Usage:ALLOWED(this CWE ID could be used to map to real-world vulnerabilities)\nP: Usage:ALLOWED\nTR: Reason:Acceptable-Use\nTD: Reason:Acceptable-Use\nP: Reason:Acceptable-Use\nTR: Rationale:This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\nTD: Rationale:This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\nP: Rationale:\nTR: Comments:Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\nTD: Comments:Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\nP: Comments:\nP: Relationship\nP: Relationship\nP: Terminology\nP: Like other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\nP: Other variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\nP: Research Gap\nP: Research Gap\nP: Incomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\nP: Any combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\nTABLE: Mapped Taxonomy NameNode IDFitMapped Node NamePLOVERPath TraversalOWASP Top Ten 2007A4CWE More SpecificInsecure Direct Object ReferenceOWASP Top Ten 2004A2CWE More SpecificBroken Access ControlCERT C Secure CodingFIO02-CCanonicalize path names originating from untrusted sourcesSEI CERT Perl Coding StandardIDS00-PLExactCanonicalize path names before validating themWASC33Path TraversalSoftware Fault PatternsSFP16Path TraversalOMG ASCSMASCSM-CWE-22\nTR: Mapped Taxonomy NameNode IDFitMapped Node Name\nTR: PLOVERPath Traversal\nTD: PLOVER\nTD: \nTD: \nTD: Path Traversal\nTR: OWASP Top Ten 2007A4CWE More SpecificInsecure Direct Object Reference\nTD: OWASP Top Ten 2007\nTD: A4\nTD: CWE More Specific\nTD: Insecure Direct Object Reference\nTR: OWASP Top Ten 2004A2CWE More SpecificBroken Access Control\nTD: OWASP Top Ten 2004\nTD: A2\nTD: CWE More Specific\nTD: Broken Access Control\nTR: CERT C Secure CodingFIO02-CCanonicalize path names originating from untrusted sources\nTD: CERT C Secure Coding\nTD: FIO02-C\nTD: \nTD: Canonicalize path names originating from untrusted sources\nTR: SEI CERT Perl Coding StandardIDS00-PLExactCanonicalize path names before validating them\nTD: SEI CERT Perl Coding Standard\nTD: IDS00-PL\nTD: Exact\nTD: Canonicalize path names before validating them\nTR: WASC33Path Traversal\nTD: WASC\nTD: 33\nTD: \nTD: Path Traversal\nTR: Software Fault PatternsSFP16Path Traversal\nTD: Software Fault Patterns\nTD: SFP16\nTD: \nTD: Path Traversal\nTR: OMG ASCSMASCSM-CWE-22\nTD: OMG ASCSM\nTD: ASCSM-CWE-22\nTD: \nTD: \nTABLE: CAPEC-IDAttack Pattern NameCAPEC-126Path TraversalCAPEC-64Using Slashes and URL Encoding Combined to Bypass Validation LogicCAPEC-76Manipulating Web Input to File System CallsCAPEC-78Using Escaped Slashes in Alternate EncodingCAPEC-79Using Slashes in Alternate Encoding\nTR: CAPEC-IDAttack Pattern Name\nTR: CAPEC-126Path Traversal\nTD: CAPEC-126\nTD: Path Traversal\nTR: CAPEC-64Using Slashes and URL Encoding Combined to Bypass Validation Logic\nTD: CAPEC-64\nTD: Using Slashes and URL Encoding Combined to Bypass Validation Logic\nTR: CAPEC-76Manipulating Web Input to File System Calls\nTD: CAPEC-76\nTD: Manipulating Web Input to File System Calls\nTR: CAPEC-78Using Escaped Slashes in Alternate Encoding\nTD: CAPEC-78\nTD: Using Escaped Slashes in Alternate Encoding\nTR: CAPEC-79Using Slashes in Alternate Encoding\nTD: CAPEC-79\nTD: Using Slashes in Alternate Encoding\nTABLE: [REF-7] Michael Howard and\n\t\t\t\t\t\t\t\tDavid LeBlanc. \"Writing Secure Code\". Chapter 11, \"Directory Traversal and Using Parent Paths (..)\" Page 370. 2nd Edition. Microsoft Press. 2002-12-04. \n\t\t\t\t<https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223>.[REF-45] OWASP. \"OWASP Enterprise Security API (ESAPI) Project\". <http://www.owasp.org/index.php/ESAPI>.[REF-185] OWASP. \"Testing for Path Traversal (OWASP-AZ-001)\". <http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)>.[REF-186] Johannes Ullrich. \"Top 25 Series - Rank 7 - Path Traversal\". SANS Software Security Institute. 2010-03-09. \n\t\t\t\t<https://www.sans.org/blog/top-25-series-rank-7-path-traversal/>.URL validated: 2023-04-07.[REF-76] Sean Barnum and\n\t\t\t\t\t\t\t\tMichael Gegick. \"Least Privilege\". 2005-09-14. \n\t\t\t\t<https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege>.URL validated: 2023-04-07.[REF-62] Mark Dowd, John McDonald\n\t\t\t\t\t\t\tand Justin Schuh. \"The Art of Software Security Assessment\". Chapter 9, \"Filenames and Paths\", Page 503. 1st Edition. Addison Wesley. 2006.[REF-962] Object Management Group (OMG). \"Automated Source Code Security Measure (ASCSM)\". ASCSM-CWE-22. 2016-01. \n\t\t\t\t<http://www.omg.org/spec/ASCSM/1.0/>.\nTR: [REF-7] Michael Howard and\n\t\t\t\t\t\t\t\tDavid LeBlanc. \"Writing Secure Code\". Chapter 11, \"Directory Traversal and Using Parent Paths (..)\" Page 370. 2nd Edition. Microsoft Press. 2002-12-04. \n\t\t\t\t<https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223>.\nTD: [REF-7] Michael Howard and\n\t\t\t\t\t\t\t\tDavid LeBlanc. \"Writing Secure Code\". Chapter 11, \"Directory Traversal and Using Parent Paths (..)\" Page 370. 2nd Edition. Microsoft Press. 2002-12-04. \n\t\t\t\t<https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223>.\nTR: [REF-45] OWASP. \"OWASP Enterprise Security API (ESAPI) Project\". <http://www.owasp.org/index.php/ESAPI>.\nTD: [REF-45] OWASP. \"OWASP Enterprise Security API (ESAPI) Project\". <http://www.owasp.org/index.php/ESAPI>.\nTR: [REF-185] OWASP. \"Testing for Path Traversal (OWASP-AZ-001)\". <http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)>.\nTD: [REF-185] OWASP. \"Testing for Path Traversal (OWASP-AZ-001)\". <http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)>.\nTR: [REF-186] Johannes Ullrich. \"Top 25 Series - Rank 7 - Path Traversal\". SANS Software Security Institute. 2010-03-09. \n\t\t\t\t<https://www.sans.org/blog/top-25-series-rank-7-path-traversal/>.URL validated: 2023-04-07.\nTD: [REF-186] Johannes Ullrich. \"Top 25 Series - Rank 7 - Path Traversal\". SANS Software Security Institute. 2010-03-09. \n\t\t\t\t<https://www.sans.org/blog/top-25-series-rank-7-path-traversal/>.URL validated: 2023-04-07.\nTR: [REF-76] Sean Barnum and\n\t\t\t\t\t\t\t\tMichael Gegick. \"Least Privilege\". 2005-09-14. \n\t\t\t\t<https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege>.URL validated: 2023-04-07.\nTD: [REF-76] Sean Barnum and\n\t\t\t\t\t\t\t\tMichael Gegick. \"Least Privilege\". 2005-09-14. \n\t\t\t\t<https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege>.URL validated: 2023-04-07.\nTR: [REF-62] Mark Dowd, John McDonald\n\t\t\t\t\t\t\tand Justin Schuh. \"The Art of Software Security Assessment\". Chapter 9, \"Filenames and Paths\", Page 503. 1st Edition. Addison Wesley. 2006.\nTD: [REF-62] Mark Dowd, John McDonald\n\t\t\t\t\t\t\tand Justin Schuh. \"The Art of Software Security Assessment\". Chapter 9, \"Filenames and Paths\", Page 503. 1st Edition. Addison Wesley. 2006.\nTR: [REF-962] Object Management Group (OMG). \"Automated Source Code Security Measure (ASCSM)\". ASCSM-CWE-22. 2016-01. \n\t\t\t\t<http://www.omg.org/spec/ASCSM/1.0/>.\nTD: [REF-962] Object Management Group (OMG). \"Automated Source Code Security Measure (ASCSM)\". ASCSM-CWE-22. 2016-01. \n\t\t\t\t<http://www.omg.org/spec/ASCSM/1.0/>.\nTABLE: SubmissionsSubmission DateSubmitterOrganization2006-07-19(CWE Draft 3, 2006-07-19)PLOVERContributionsContribution DateContributorOrganization2022-07-11Nick JohnstonIdentified weakness in Perl demonstrative exampleModificationsModification DateModifierOrganization2008-07-01Eric DalciCigitalupdated Potential_Mitigations, Time_of_Introduction2008-08-15VeracodeSuggested OWASP Top Ten 2004 mapping2008-09-08CWE Content TeamMITREupdated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities2008-10-14CWE Content TeamMITREupdated Description2008-11-24CWE Content TeamMITREupdated Relationships, Taxonomy_Mappings2009-07-27CWE Content TeamMITREupdated Potential_Mitigations2010-02-16CWE Content TeamMITREupdated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities2010-06-21CWE Content TeamMITREupdated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships2010-09-27CWE Content TeamMITREupdated Potential_Mitigations2010-12-13CWE Content TeamMITREupdated Potential_Mitigations2011-03-29CWE Content TeamMITREupdated Potential_Mitigations2011-06-27CWE Content TeamMITREupdated Relationships2011-09-13CWE Content TeamMITREupdated Potential_Mitigations, References, Relationships, Taxonomy_Mappings2012-05-11CWE Content TeamMITREupdated Demonstrative_Examples, References, Relationships2012-10-30CWE Content TeamMITREupdated Potential_Mitigations2013-02-21CWE Content TeamMITREupdated Observed_Examples2013-07-17CWE Content TeamMITREupdated Related_Attack_Patterns, Relationships2014-06-23CWE Content TeamMITREupdated Other_Notes, Research_Gaps2014-07-30CWE Content TeamMITREupdated Detection_Factors, Relationships, Taxonomy_Mappings2015-12-07CWE Content TeamMITREupdated Relationships2017-01-19CWE Content TeamMITREupdated Related_Attack_Patterns2017-05-03CWE Content TeamMITREupdated Demonstrative_Examples2017-11-08CWE Content TeamMITREupdated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings2018-03-27CWE Content TeamMITREupdated References, Relationships2019-01-03CWE Content TeamMITREupdated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings2019-06-20CWE Content TeamMITREupdated Related_Attack_Patterns, Relationships, Type2019-09-19CWE Content TeamMITREupdated Relationships2020-02-24CWE Content TeamMITREupdated Potential_Mitigations, Relationships2020-06-25CWE Content TeamMITREupdated Demonstrative_Examples, Potential_Mitigations2020-08-20CWE Content TeamMITREupdated Relationships2020-12-10CWE Content TeamMITREupdated Potential_Mitigations, Relationships2021-03-15CWE Content TeamMITREupdated Demonstrative_Examples, Relationships2021-07-20CWE Content TeamMITREupdated Relationships2021-10-28CWE Content TeamMITREupdated Observed_Examples, Relationships2022-06-28CWE Content TeamMITREupdated Observed_Examples, Relationships2022-10-13CWE Content TeamMITREupdated Observed_Examples, References2023-01-31CWE Content TeamMITREupdated Common_Consequences, Description, Detection_Factors2023-04-27CWE Content TeamMITREupdated Demonstrative_Examples, References, Relationships, Time_of_Introduction2023-06-29CWE Content TeamMITREupdated Mapping_Notes, Relationships2023-10-26CWE Content TeamMITREupdated Observed_ExamplesPrevious Entry NamesChange DatePrevious Entry Name2010-02-16Path Traversal\nTR: Submissions\nTR: Submission DateSubmitterOrganization\nTR: 2006-07-19(CWE Draft 3, 2006-07-19)PLOVER\nTD: 2006-07-19(CWE Draft 3, 2006-07-19)\nTD: PLOVER\nTD: \nTR: \nTD: \nTR: Contributions\nTR: Contribution DateContributorOrganization\nTR: 2022-07-11Nick Johnston\nTD: 2022-07-11\nTD: Nick Johnston\nTD: \nTR: Identified weakness in Perl demonstrative example\nTD: Identified weakness in Perl demonstrative example\nTR: Modifications\nTR: Modification DateModifierOrganization\nTR: 2008-07-01Eric DalciCigital\nTD: 2008-07-01\nTD: Eric Dalci\nTD: Cigital\nTR: updated Potential_Mitigations, Time_of_Introduction\nTD: updated Potential_Mitigations, Time_of_Introduction\nTR: 2008-08-15Veracode\nTD: 2008-08-15\nTD: \nTD: Veracode\nTR: Suggested OWASP Top Ten 2004 mapping\nTD: Suggested OWASP Top Ten 2004 mapping\nTR: 2008-09-08CWE Content TeamMITRE\nTD: 2008-09-08\nTD: CWE Content Team\nTD: MITRE\nTR: updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities\nTD: updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities\nTR: 2008-10-14CWE Content TeamMITRE\nTD: 2008-10-14\nTD: CWE Content Team\nTD: MITRE\nTR: updated Description\nTD: updated Description\nTR: 2008-11-24CWE Content TeamMITRE\nTD: 2008-11-24\nTD: CWE Content Team\nTD: MITRE\nTR: updated Relationships, Taxonomy_Mappings\nTD: updated Relationships, Taxonomy_Mappings\nTR: 2009-07-27CWE Content TeamMITRE\nTD: 2009-07-27\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations\nTD: updated Potential_Mitigations\nTR: 2010-02-16CWE Content TeamMITRE\nTD: 2010-02-16\nTD: CWE Content Team\nTD: MITRE\nTR: updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities\nTD: updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities\nTR: 2010-06-21CWE Content TeamMITRE\nTD: 2010-06-21\nTD: CWE Content Team\nTD: MITRE\nTR: updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships\nTD: updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships\nTR: 2010-09-27CWE Content TeamMITRE\nTD: 2010-09-27\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations\nTD: updated Potential_Mitigations\nTR: 2010-12-13CWE Content TeamMITRE\nTD: 2010-12-13\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations\nTD: updated Potential_Mitigations\nTR: 2011-03-29CWE Content TeamMITRE\nTD: 2011-03-29\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations\nTD: updated Potential_Mitigations\nTR: 2011-06-27CWE Content TeamMITRE\nTD: 2011-06-27\nTD: CWE Content Team\nTD: MITRE\nTR: updated Relationships\nTD: updated Relationships\nTR: 2011-09-13CWE Content TeamMITRE\nTD: 2011-09-13\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings\nTD: updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings\nTR: 2012-05-11CWE Content TeamMITRE\nTD: 2012-05-11\nTD: CWE Content Team\nTD: MITRE\nTR: updated Demonstrative_Examples, References, Relationships\nTD: updated Demonstrative_Examples, References, Relationships\nTR: 2012-10-30CWE Content TeamMITRE\nTD: 2012-10-30\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations\nTD: updated Potential_Mitigations\nTR: 2013-02-21CWE Content TeamMITRE\nTD: 2013-02-21\nTD: CWE Content Team\nTD: MITRE\nTR: updated Observed_Examples\nTD: updated Observed_Examples\nTR: 2013-07-17CWE Content TeamMITRE\nTD: 2013-07-17\nTD: CWE Content Team\nTD: MITRE\nTR: updated Related_Attack_Patterns, Relationships\nTD: updated Related_Attack_Patterns, Relationships\nTR: 2014-06-23CWE Content TeamMITRE\nTD: 2014-06-23\nTD: CWE Content Team\nTD: MITRE\nTR: updated Other_Notes, Research_Gaps\nTD: updated Other_Notes, Research_Gaps\nTR: 2014-07-30CWE Content TeamMITRE\nTD: 2014-07-30\nTD: CWE Content Team\nTD: MITRE\nTR: updated Detection_Factors, Relationships, Taxonomy_Mappings\nTD: updated Detection_Factors, Relationships, Taxonomy_Mappings\nTR: 2015-12-07CWE Content TeamMITRE\nTD: 2015-12-07\nTD: CWE Content Team\nTD: MITRE\nTR: updated Relationships\nTD: updated Relationships\nTR: 2017-01-19CWE Content TeamMITRE\nTD: 2017-01-19\nTD: CWE Content Team\nTD: MITRE\nTR: updated Related_Attack_Patterns\nTD: updated Related_Attack_Patterns\nTR: 2017-05-03CWE Content TeamMITRE\nTD: 2017-05-03\nTD: CWE Content Team\nTD: MITRE\nTR: updated Demonstrative_Examples\nTD: updated Demonstrative_Examples\nTR: 2017-11-08CWE Content TeamMITRE\nTD: 2017-11-08\nTD: CWE Content Team\nTD: MITRE\nTR: updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings\nTD: updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings\nTR: 2018-03-27CWE Content TeamMITRE\nTD: 2018-03-27\nTD: CWE Content Team\nTD: MITRE\nTR: updated References, Relationships\nTD: updated References, Relationships\nTR: 2019-01-03CWE Content TeamMITRE\nTD: 2019-01-03\nTD: CWE Content Team\nTD: MITRE\nTR: updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings\nTD: updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings\nTR: 2019-06-20CWE Content TeamMITRE\nTD: 2019-06-20\nTD: CWE Content Team\nTD: MITRE\nTR: updated Related_Attack_Patterns, Relationships, Type\nTD: updated Related_Attack_Patterns, Relationships, Type\nTR: 2019-09-19CWE Content TeamMITRE\nTD: 2019-09-19\nTD: CWE Content Team\nTD: MITRE\nTR: updated Relationships\nTD: updated Relationships\nTR: 2020-02-24CWE Content TeamMITRE\nTD: 2020-02-24\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations, Relationships\nTD: updated Potential_Mitigations, Relationships\nTR: 2020-06-25CWE Content TeamMITRE\nTD: 2020-06-25\nTD: CWE Content Team\nTD: MITRE\nTR: updated Demonstrative_Examples, Potential_Mitigations\nTD: updated Demonstrative_Examples, Potential_Mitigations\nTR: 2020-08-20CWE Content TeamMITRE\nTD: 2020-08-20\nTD: CWE Content Team\nTD: MITRE\nTR: updated Relationships\nTD: updated Relationships\nTR: 2020-12-10CWE Content TeamMITRE\nTD: 2020-12-10\nTD: CWE Content Team\nTD: MITRE\nTR: updated Potential_Mitigations, Relationships\nTD: updated Potential_Mitigations, Relationships\nTR: 2021-03-15CWE Content TeamMITRE\nTD: 2021-03-15\nTD: CWE Content Team\nTD: MITRE\nTR: updated Demonstrative_Examples, Relationships\nTD: updated Demonstrative_Examples, Relationships\nTR: 2021-07-20CWE Content TeamMITRE\nTD: 2021-07-20\nTD: CWE Content Team\nTD: MITRE\nTR: updated Relationships\nTD: updated Relationships\nTR: 2021-10-28CWE Content TeamMITRE\nTD: 2021-10-28\nTD: CWE Content Team\nTD: MITRE\nTR: updated Observed_Examples, Relationships\nTD: updated Observed_Examples, Relationships\nTR: 2022-06-28CWE Content TeamMITRE\nTD: 2022-06-28\nTD: CWE Content Team\nTD: MITRE\nTR: updated Observed_Examples, Relationships\nTD: updated Observed_Examples, Relationships\nTR: 2022-10-13CWE Content TeamMITRE\nTD: 2022-10-13\nTD: CWE Content Team\nTD: MITRE\nTR: updated Observed_Examples, References\nTD: updated Observed_Examples, References\nTR: 2023-01-31CWE Content TeamMITRE\nTD: 2023-01-31\nTD: CWE Content Team\nTD: MITRE\nTR: updated Common_Consequences, Description, Detection_Factors\nTD: updated Common_Consequences, Description, Detection_Factors\nTR: 2023-04-27CWE Content TeamMITRE\nTD: 2023-04-27\nTD: CWE Content Team\nTD: MITRE\nTR: updated Demonstrative_Examples, References, Relationships, Time_of_Introduction\nTD: updated Demonstrative_Examples, References, Relationships, Time_of_Introduction\nTR: 2023-06-29CWE Content TeamMITRE\nTD: 2023-06-29\nTD: CWE Content Team\nTD: MITRE\nTR: updated Mapping_Notes, Relationships\nTD: updated Mapping_Notes, Relationships\nTR: 2023-10-26CWE Content TeamMITRE\nTD: 2023-10-26\nTD: CWE Content Team\nTD: MITRE\nTR: updated Observed_Examples\nTD: updated Observed_Examples\nTR: Previous Entry Names\nTR: Change DatePrevious Entry Name\nTR: 2010-02-16Path Traversal\nTD: 2010-02-16\nTD: Path Traversal\nTR: \nTD: \n"
        },
        {
            "role": "assistant",
            "content": "Analysis and mitigation strategies based on the provided CWE details."
        }
    ]
}