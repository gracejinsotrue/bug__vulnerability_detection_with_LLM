from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnableSequence, RunnableLambda
from tools import RetrieveSourceCodeTool, FindCallersTool
from output_schemas import DebuggingOutput

def create_debugging_agent():
    llm = ChatOpenAI()

    prompt_template = ChatPromptTemplate.from_template(
        "You are a debugging assistant. Your task is to assist in debugging tasks. {user_input}"
    )

    schema = DebuggingOutput.get_schema()
    structured_llm = llm.with_structured_output(schema=schema)

    tools = {
        "RetrieveSourceCode": RetrieveSourceCodeTool(),
        "FindCallers": FindCallersTool(),
    }

    def extract_result(input):
        return input['result']

    runnable_sequence = RunnableSequence(
        steps=[
            prompt_template,
            structured_llm,
            RunnableLambda(extract_result)
        ]
    )

    return runnable_sequence
