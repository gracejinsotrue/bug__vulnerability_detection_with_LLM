[
    {
        "baseNode": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        },
        "relation1": {
            "identity": 23147,
            "start": 11168,
            "end": 11177,
            "type": "PATCHED_FILE",
            "properties": {}
        },
        "oneEdgeAway": {
            "identity": 11177,
            "labels": [
                "FileModification"
            ],
            "properties": {
                "diffEmbeddings": [
                    0.01935593970119953,
                    0.04103965684771538,
                    -0.07932759076356888,
                    0.06009429693222046,
                    -0.022750889882445335,
                    -0.023639842867851257,
                    -0.03356336057186127,
                    0.03399555757641792,
                    -0.007232479751110077,
                    -0.014680162072181702,
                    -0.07615358382463455,
                    0.0609646700322628,
                    -0.07046553492546082,
                    -0.015053785406053066,
                    0.030364686623215675,
                    -0.07250655442476273,
                    0.12934733927249908,
                    0.018072541803121567,
                    0.01391685288399458,
                    0.006611227989196777,
                    0.020489001646637917,
                    0.06169304624199867,
                    -0.05617548152804375,
                    -0.03588925674557686,
                    0.057950690388679504,
                    -0.005753830540925264,
                    -0.11914405971765518,
                    -0.021346697583794594,
                    -0.002438559429720044,
                    0.008242032490670681,
                    -0.039399173110723495,
                    -0.1235734149813652,
                    -0.05191786587238312,
                    0.05264286324381828,
                    0.003974847961217165,
                    0.019020138308405876,
                    0.01661039888858795,
                    -0.034869786351919174,
                    -0.0016823721816763282,
                    0.011577860452234745,
                    0.024528495967388153,
                    -0.05360576882958412,
                    0.04196454957127571,
                    0.043581247329711914,
                    -0.006304396316409111,
                    0.07532375305891037,
                    0.05626354739069939,
                    -0.11213145405054092,
                    0.04735381901264191,
                    -0.03499870374798775,
                    -0.00018419325351715088,
                    0.012109030969440937,
                    -0.03411618992686272,
                    -0.024080581963062286,
                    0.06835886090993881,
                    0.06041273474693298,
                    -0.031427595764398575,
                    0.08259917050600052,
                    -0.09158571809530258,
                    0.04831908270716667,
                    -0.0151967853307724,
                    -0.035409532487392426,
                    0.04630589485168457,
                    0.003056565299630165,
                    -0.005896370857954025,
                    0.017614474520087242,
                    0.10674086958169937,
                    0.05875276029109955,
                    -0.013605065643787384,
                    -0.046465035527944565,
                    0.030248545110225677,
                    0.12310317158699036,
                    -0.0352630615234375,
                    -0.053601473569869995,
                    -0.05061274394392967,
                    -0.027992008253932,
                    -0.06518588215112686,
                    0.017218103632330894,
                    0.021988095715641975,
                    -0.04861250892281532,
                    0.0029422922525554895,
                    -0.032549213618040085,
                    0.07635524123907089,
                    -0.006732020527124405,
                    0.01781024970114231,
                    -0.059418510645627975,
                    0.029638299718499184,
                    -0.04136666655540466,
                    -0.024212097749114037,
                    0.023058699443936348,
                    -0.004834020975977182,
                    -0.018581071868538857,
                    0.05938473716378212,
                    -0.03459857031702995,
                    -0.018319038674235344,
                    0.06250754743814468,
                    -0.009008307941257954,
                    -0.059895824640989304,
                    -0.023133182898163795,
                    0.010013955645263195,
                    -0.08249760419130325,
                    0.009590884670615196,
                    -0.08545707911252975,
                    -0.011543665081262589,
                    -0.007723696529865265,
                    0.03639303520321846,
                    -0.08773093670606613,
                    0.058848243206739426,
                    -0.04026848450303078,
                    -0.041160669177770615,
                    0.0024880513083189726,
                    0.0013312561204656959,
                    -0.030119789764285088,
                    0.009421725757420063,
                    -0.03421411290764809,
                    -0.029968688264489174,
                    0.004111939575523138,
                    0.00042338823550380766,
                    -0.05287748575210571,
                    -0.02148202620446682,
                    0.015323061496019363,
                    0.024040305987000465,
                    -0.03876282274723053,
                    -0.049085427075624466,
                    0.07712893933057785,
                    -0.03668259084224701,
                    0.005203098990023136,
                    0.04581299424171448,
                    0.07954861968755722,
                    0.0055788136087358,
                    -0.021877041086554527,
                    0.012125551700592041,
                    0.021241774782538414,
                    -0.05138323828577995,
                    -0.04677921533584595,
                    0.03145552799105644,
                    0.15833733975887299,
                    0.007293969392776489,
                    0.029967496171593666,
                    0.011367488652467728,
                    -0.04650592803955078,
                    0.04336743429303169,
                    -0.05219167470932007,
                    0.022971108555793762,
                    -0.026221951469779015,
                    -0.021687448024749756,
                    0.08076029270887375,
                    0.045160189270973206,
                    -0.11547272652387619,
                    -0.00800646748393774,
                    0.011639873497188091,
                    -0.012483016587793827,
                    -0.047197867184877396,
                    -0.0463268868625164,
                    0.0006434700335375965,
                    -0.0213633980602026,
                    -0.02917707897722721,
                    0.04551442340016365,
                    -0.027598999440670013,
                    -0.06305915862321854,
                    -0.0026438776403665543,
                    -0.015700483694672585,
                    -0.0011315433075651526,
                    0.08110686391592026,
                    -0.020282354205846786,
                    0.02135488949716091,
                    -0.07048388570547104,
                    -0.0020438721403479576,
                    -0.027469784021377563,
                    0.012492131441831589,
                    0.027353504672646523,
                    0.023776063695549965,
                    -0.031710464507341385,
                    -0.07368683815002441,
                    0.055811960250139236,
                    0.0016986243426799774,
                    -0.07682203501462936,
                    0.03185184299945831,
                    0.058617766946554184,
                    0.07105978578329086,
                    0.002543611219152808,
                    0.052092891186475754,
                    -0.03860742226243019,
                    -0.07476205378770828,
                    -0.04242372140288353,
                    0.017913013696670532,
                    0.00898010190576315,
                    -0.03838525339961052,
                    -0.06207631900906563,
                    0.035515572875738144,
                    -0.012012411840260029,
                    -0.030941205099225044,
                    0.04322940111160278,
                    -0.00549178896471858,
                    -0.11937687546014786,
                    -0.0036517151165753603,
                    -0.04225236549973488,
                    0.007236494217067957,
                    -0.036030612885951996,
                    -0.04586479440331459,
                    -0.0046503436751663685,
                    0.01867925003170967,
                    0.0637897476553917,
                    -0.008568168617784977,
                    -0.03132196143269539,
                    -0.06917423009872437,
                    0.017381323501467705,
                    -0.02062326669692993,
                    0.1129346713423729,
                    0.012853560037910938,
                    -0.01209099218249321,
                    0.03823729604482651,
                    0.032744523137807846,
                    0.05682660639286041,
                    -0.02299862541258335,
                    0.03616956248879433,
                    0.05436718463897705,
                    -0.0031455892603844404,
                    -0.027362383902072906,
                    0.029535947367548943,
                    -0.08084724098443985,
                    -0.06496163457632065,
                    0.021421223878860474,
                    0.00040852403617464006,
                    0.09497901797294617,
                    0.02306075394153595,
                    0.061540793627500534,
                    -0.06398782134056091,
                    0.07702778279781342,
                    -0.008109687827527523,
                    -0.01583937741816044,
                    0.13801991939544678,
                    -0.029734665527939796,
                    -0.0094695333391428,
                    0.03896406665444374,
                    -0.10014491528272629,
                    0.05609004199504852,
                    0.11028552800416946,
                    -0.0389866977930069,
                    0.003788493573665619,
                    0.019275056198239326,
                    -0.0437069796025753,
                    -0.014871870167553425,
                    -0.03802154213190079,
                    0.010150662623345852,
                    -0.08706003427505493,
                    -0.12516722083091736,
                    0.18704883754253387,
                    -0.0728306844830513,
                    0.021223196759819984,
                    -0.042912036180496216,
                    0.005508820991963148,
                    0.13875441253185272,
                    -0.02515150047838688,
                    -0.013448335230350494,
                    0.03470717370510101
                ],
                "diffText": "diff --git a/lib/llvm/compiler.cpp b/lib/llvm/compiler.cpp\nindex 3c0ea1c5..8f5e5a34 100644\n--- a/lib/llvm/compiler.cpp\n+++ b/lib/llvm/compiler.cpp\n@@ -5179,113 +5179,115 @@ void Compiler::compile(const AST::TypeSection &TypeSec) noexcept {\n   if (Size == 0) {\n     return;\n   }\n-  Context->FunctionTypes.reserve(SubTypes.size());\n-  Context->FunctionWrappers.reserve(SubTypes.size());\n+  Context->FunctionTypes.reserve(Size);\n+  Context->FunctionWrappers.reserve(Size);\n \n   // Iterate and compile types.\n-  for (size_t I = 0; I < SubTypes.size(); ++I) {\n-    // TODO: GC - AOT: implement other composite types.\n-    if (!SubTypes[I].getCompositeType().isFunc()) {\n-      spdlog::error(\"GC proposal not supported for AOT currently.\");\n-      return;\n-    }\n-    const auto &FuncType = SubTypes[I].getCompositeType().getFuncType();\n-    const auto Name = fmt::format(\"t{}\"sv, Context->FunctionTypes.size());\n-\n-    // Check function type is unique\n-    {\n-      bool Unique = true;\n-      for (size_t J = 0; J < I; ++J) {\n-        const auto &OldFuncType = *Context->FunctionTypes[J];\n-        if (OldFuncType == FuncType) {\n-          Unique = false;\n-          Context->FunctionTypes.push_back(&OldFuncType);\n-          auto F = Context->FunctionWrappers[J];\n-          Context->FunctionWrappers.push_back(F);\n-          auto A = Context->LLModule.addAlias(WrapperTy, F, Name.c_str());\n-          A.setLinkage(LLVMExternalLinkage);\n-          A.setVisibility(LLVMProtectedVisibility);\n-          A.setDSOLocal(true);\n-          A.setDLLStorageClass(LLVMDLLExportStorageClass);\n-          break;\n+  for (size_t I = 0; I < Size; ++I) {\n+    if (SubTypes[I].getCompositeType().isFunc()) {\n+      const auto &FuncType = SubTypes[I].getCompositeType().getFuncType();\n+      const auto Name = fmt::format(\"t{}\"sv, Context->FunctionTypes.size());\n+\n+      // Check function type is unique\n+      {\n+        bool Unique = true;\n+        for (size_t J = 0; J < I; ++J) {\n+          if (const auto OldFuncType = Context->FunctionTypes[J]) {\n+            if (*OldFuncType == FuncType) {\n+              Unique = false;\n+              Context->FunctionTypes.push_back(OldFuncType);\n+              auto F = Context->FunctionWrappers[J];\n+              Context->FunctionWrappers.push_back(F);\n+              auto A = Context->LLModule.addAlias(WrapperTy, F, Name.c_str());\n+              A.setLinkage(LLVMExternalLinkage);\n+              A.setVisibility(LLVMProtectedVisibility);\n+              A.setDSOLocal(true);\n+              A.setDLLStorageClass(LLVMDLLExportStorageClass);\n+              break;\n+            }\n+          }\n+        }\n+        if (!Unique) {\n+          continue;\n         }\n       }\n-      if (!Unique) {\n-        continue;\n-      }\n-    }\n-\n-    // Create Wrapper\n-    auto F = Context->LLModule.addFunction(WrapperTy, LLVMExternalLinkage,\n-                                           Name.c_str());\n-    {\n-      F.setVisibility(LLVMProtectedVisibility);\n-      F.setDSOLocal(true);\n-      F.setDLLStorageClass(LLVMDLLExportStorageClass);\n-      F.addFnAttr(Context->NoStackArgProbe);\n-      F.addFnAttr(Context->StrictFP);\n-      F.addFnAttr(Context->UWTable);\n-      F.addParamAttr(0, Context->ReadOnly);\n-      F.addParamAttr(0, Context->NoAlias);\n-      F.addParamAttr(1, Context->NoAlias);\n-      F.addParamAttr(2, Context->NoAlias);\n-      F.addParamAttr(3, Context->NoAlias);\n-\n-      LLVM::Builder Builder(Context->LLContext);\n-      Builder.positionAtEnd(\n-          LLVM::BasicBlock::create(Context->LLContext, F, \"entry\"));\n \n-      auto FTy =\n-          toLLVMType(Context->LLContext, Context->ExecCtxPtrTy, FuncType);\n-      auto RTy = FTy.getReturnType();\n-      std::vector<LLVM::Type> FPTy(FTy.getNumParams());\n-      FTy.getParamTypes(FPTy);\n-\n-      const size_t ArgCount = FPTy.size() - 1;\n-      const size_t RetCount =\n-          RTy.isVoidTy() ? 0\n-                         : (RTy.isStructTy() ? RTy.getStructNumElements() : 1);\n-      auto ExecCtxPtr = F.getFirstParam();\n-      auto RawFunc = LLVM::FunctionCallee{\n-          FTy,\n-          Builder.createBitCast(ExecCtxPtr.getNextParam(), FTy.getPointerTo())};\n-      auto RawArgs = ExecCtxPtr.getNextParam().getNextParam();\n-      auto RawRets = RawArgs.getNextParam();\n-\n-      std::vector<LLVM::Value> Args;\n-      Args.reserve(FTy.getNumParams());\n-      Args.push_back(ExecCtxPtr);\n-      for (size_t J = 0; J < ArgCount; ++J) {\n-        auto ArgTy = FPTy[J + 1];\n-        auto VPtr = Builder.createConstInBoundsGEP1_64(Context->Int8Ty, RawArgs,\n-                                                       J * kValSize);\n-        auto Ptr = Builder.createBitCast(VPtr, ArgTy.getPointerTo());\n-        Args.push_back(Builder.createLoad(ArgTy, Ptr));\n-      }\n-\n-      auto Ret = Builder.createCall(RawFunc, Args);\n-      if (RTy.isVoidTy()) {\n-        // nothing to do\n-      } else if (RTy.isStructTy()) {\n-        auto Rets = unpackStruct(Builder, Ret);\n-        for (size_t J = 0; J < RetCount; ++J) {\n+      // Create Wrapper\n+      auto F = Context->LLModule.addFunction(WrapperTy, LLVMExternalLinkage,\n+                                             Name.c_str());\n+      {\n+        F.setVisibility(LLVMProtectedVisibility);\n+        F.setDSOLocal(true);\n+        F.setDLLStorageClass(LLVMDLLExportStorageClass);\n+        F.addFnAttr(Context->NoStackArgProbe);\n+        F.addFnAttr(Context->StrictFP);\n+        F.addFnAttr(Context->UWTable);\n+        F.addParamAttr(0, Context->ReadOnly);\n+        F.addParamAttr(0, Context->NoAlias);\n+        F.addParamAttr(1, Context->NoAlias);\n+        F.addParamAttr(2, Context->NoAlias);\n+        F.addParamAttr(3, Context->NoAlias);\n+\n+        LLVM::Builder Builder(Context->LLContext);\n+        Builder.positionAtEnd(\n+            LLVM::BasicBlock::create(Context->LLContext, F, \"entry\"));\n+\n+        auto FTy =\n+            toLLVMType(Context->LLContext, Context->ExecCtxPtrTy, FuncType);\n+        auto RTy = FTy.getReturnType();\n+        std::vector<LLVM::Type> FPTy(FTy.getNumParams());\n+        FTy.getParamTypes(FPTy);\n+\n+        const size_t ArgCount = FPTy.size() - 1;\n+        const size_t RetCount =\n+            RTy.isVoidTy()\n+                ? 0\n+                : (RTy.isStructTy() ? RTy.getStructNumElements() : 1);\n+        auto ExecCtxPtr = F.getFirstParam();\n+        auto RawFunc = LLVM::FunctionCallee{\n+            FTy, Builder.createBitCast(ExecCtxPtr.getNextParam(),\n+                                       FTy.getPointerTo())};\n+        auto RawArgs = ExecCtxPtr.getNextParam().getNextParam();\n+        auto RawRets = RawArgs.getNextParam();\n+\n+        std::vector<LLVM::Value> Args;\n+        Args.reserve(FTy.getNumParams());\n+        Args.push_back(ExecCtxPtr);\n+        for (size_t J = 0; J < ArgCount; ++J) {\n+          auto ArgTy = FPTy[J + 1];\n           auto VPtr = Builder.createConstInBoundsGEP1_64(Context->Int8Ty,\n-                                                         RawRets, J * kValSize);\n-          auto Ptr =\n-              Builder.createBitCast(VPtr, Rets[J].getType().getPointerTo());\n-          Builder.createStore(Rets[J], Ptr);\n+                                                         RawArgs, J * kValSize);\n+          auto Ptr = Builder.createBitCast(VPtr, ArgTy.getPointerTo());\n+          Args.push_back(Builder.createLoad(ArgTy, Ptr));\n         }\n-      } else {\n-        auto VPtr =\n-            Builder.createConstInBoundsGEP1_64(Context->Int8Ty, RawRets, 0);\n-        auto Ptr = Builder.createBitCast(VPtr, Ret.getType().getPointerTo());\n-        Builder.createStore(Ret, Ptr);\n+\n+        auto Ret = Builder.createCall(RawFunc, Args);\n+        if (RTy.isVoidTy()) {\n+          // nothing to do\n+        } else if (RTy.isStructTy()) {\n+          auto Rets = unpackStruct(Builder, Ret);\n+          for (size_t J = 0; J < RetCount; ++J) {\n+            auto VPtr = Builder.createConstInBoundsGEP1_64(\n+                Context->Int8Ty, RawRets, J * kValSize);\n+            auto Ptr =\n+                Builder.createBitCast(VPtr, Rets[J].getType().getPointerTo());\n+            Builder.createStore(Rets[J], Ptr);\n+          }\n+        } else {\n+          auto VPtr =\n+              Builder.createConstInBoundsGEP1_64(Context->Int8Ty, RawRets, 0);\n+          auto Ptr = Builder.createBitCast(VPtr, Ret.getType().getPointerTo());\n+          Builder.createStore(Ret, Ptr);\n+        }\n+        Builder.createRetVoid();\n       }\n-      Builder.createRetVoid();\n+      // Copy wrapper, param and return lists to module instance.\n+      Context->FunctionTypes.push_back(&FuncType);\n+      Context->FunctionWrappers.push_back(F);\n+    } else {\n+      Context->FunctionTypes.push_back(nullptr);\n+      Context->FunctionWrappers.push_back(LLVM::Value());\n     }\n-    // Copy wrapper, param and return lists to module instance.\n-    Context->FunctionTypes.push_back(&FuncType);\n-    Context->FunctionWrappers.push_back(F);\n   }\n }\n "
            }
        },
        "relation2": {
            "identity": 23147,
            "start": 11177,
            "end": 11168,
            "type": "PATCHED_FILE",
            "properties": {}
        },
        "twoEdgesAway": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        }
    },
    {
        "baseNode": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        },
        "relation1": {
            "identity": 23147,
            "start": 11168,
            "end": 11177,
            "type": "PATCHED_FILE",
            "properties": {}
        },
        "oneEdgeAway": {
            "identity": 11177,
            "labels": [
                "FileModification"
            ],
            "properties": {
                "diffEmbeddings": [
                    0.01935593970119953,
                    0.04103965684771538,
                    -0.07932759076356888,
                    0.06009429693222046,
                    -0.022750889882445335,
                    -0.023639842867851257,
                    -0.03356336057186127,
                    0.03399555757641792,
                    -0.007232479751110077,
                    -0.014680162072181702,
                    -0.07615358382463455,
                    0.0609646700322628,
                    -0.07046553492546082,
                    -0.015053785406053066,
                    0.030364686623215675,
                    -0.07250655442476273,
                    0.12934733927249908,
                    0.018072541803121567,
                    0.01391685288399458,
                    0.006611227989196777,
                    0.020489001646637917,
                    0.06169304624199867,
                    -0.05617548152804375,
                    -0.03588925674557686,
                    0.057950690388679504,
                    -0.005753830540925264,
                    -0.11914405971765518,
                    -0.021346697583794594,
                    -0.002438559429720044,
                    0.008242032490670681,
                    -0.039399173110723495,
                    -0.1235734149813652,
                    -0.05191786587238312,
                    0.05264286324381828,
                    0.003974847961217165,
                    0.019020138308405876,
                    0.01661039888858795,
                    -0.034869786351919174,
                    -0.0016823721816763282,
                    0.011577860452234745,
                    0.024528495967388153,
                    -0.05360576882958412,
                    0.04196454957127571,
                    0.043581247329711914,
                    -0.006304396316409111,
                    0.07532375305891037,
                    0.05626354739069939,
                    -0.11213145405054092,
                    0.04735381901264191,
                    -0.03499870374798775,
                    -0.00018419325351715088,
                    0.012109030969440937,
                    -0.03411618992686272,
                    -0.024080581963062286,
                    0.06835886090993881,
                    0.06041273474693298,
                    -0.031427595764398575,
                    0.08259917050600052,
                    -0.09158571809530258,
                    0.04831908270716667,
                    -0.0151967853307724,
                    -0.035409532487392426,
                    0.04630589485168457,
                    0.003056565299630165,
                    -0.005896370857954025,
                    0.017614474520087242,
                    0.10674086958169937,
                    0.05875276029109955,
                    -0.013605065643787384,
                    -0.046465035527944565,
                    0.030248545110225677,
                    0.12310317158699036,
                    -0.0352630615234375,
                    -0.053601473569869995,
                    -0.05061274394392967,
                    -0.027992008253932,
                    -0.06518588215112686,
                    0.017218103632330894,
                    0.021988095715641975,
                    -0.04861250892281532,
                    0.0029422922525554895,
                    -0.032549213618040085,
                    0.07635524123907089,
                    -0.006732020527124405,
                    0.01781024970114231,
                    -0.059418510645627975,
                    0.029638299718499184,
                    -0.04136666655540466,
                    -0.024212097749114037,
                    0.023058699443936348,
                    -0.004834020975977182,
                    -0.018581071868538857,
                    0.05938473716378212,
                    -0.03459857031702995,
                    -0.018319038674235344,
                    0.06250754743814468,
                    -0.009008307941257954,
                    -0.059895824640989304,
                    -0.023133182898163795,
                    0.010013955645263195,
                    -0.08249760419130325,
                    0.009590884670615196,
                    -0.08545707911252975,
                    -0.011543665081262589,
                    -0.007723696529865265,
                    0.03639303520321846,
                    -0.08773093670606613,
                    0.058848243206739426,
                    -0.04026848450303078,
                    -0.041160669177770615,
                    0.0024880513083189726,
                    0.0013312561204656959,
                    -0.030119789764285088,
                    0.009421725757420063,
                    -0.03421411290764809,
                    -0.029968688264489174,
                    0.004111939575523138,
                    0.00042338823550380766,
                    -0.05287748575210571,
                    -0.02148202620446682,
                    0.015323061496019363,
                    0.024040305987000465,
                    -0.03876282274723053,
                    -0.049085427075624466,
                    0.07712893933057785,
                    -0.03668259084224701,
                    0.005203098990023136,
                    0.04581299424171448,
                    0.07954861968755722,
                    0.0055788136087358,
                    -0.021877041086554527,
                    0.012125551700592041,
                    0.021241774782538414,
                    -0.05138323828577995,
                    -0.04677921533584595,
                    0.03145552799105644,
                    0.15833733975887299,
                    0.007293969392776489,
                    0.029967496171593666,
                    0.011367488652467728,
                    -0.04650592803955078,
                    0.04336743429303169,
                    -0.05219167470932007,
                    0.022971108555793762,
                    -0.026221951469779015,
                    -0.021687448024749756,
                    0.08076029270887375,
                    0.045160189270973206,
                    -0.11547272652387619,
                    -0.00800646748393774,
                    0.011639873497188091,
                    -0.012483016587793827,
                    -0.047197867184877396,
                    -0.0463268868625164,
                    0.0006434700335375965,
                    -0.0213633980602026,
                    -0.02917707897722721,
                    0.04551442340016365,
                    -0.027598999440670013,
                    -0.06305915862321854,
                    -0.0026438776403665543,
                    -0.015700483694672585,
                    -0.0011315433075651526,
                    0.08110686391592026,
                    -0.020282354205846786,
                    0.02135488949716091,
                    -0.07048388570547104,
                    -0.0020438721403479576,
                    -0.027469784021377563,
                    0.012492131441831589,
                    0.027353504672646523,
                    0.023776063695549965,
                    -0.031710464507341385,
                    -0.07368683815002441,
                    0.055811960250139236,
                    0.0016986243426799774,
                    -0.07682203501462936,
                    0.03185184299945831,
                    0.058617766946554184,
                    0.07105978578329086,
                    0.002543611219152808,
                    0.052092891186475754,
                    -0.03860742226243019,
                    -0.07476205378770828,
                    -0.04242372140288353,
                    0.017913013696670532,
                    0.00898010190576315,
                    -0.03838525339961052,
                    -0.06207631900906563,
                    0.035515572875738144,
                    -0.012012411840260029,
                    -0.030941205099225044,
                    0.04322940111160278,
                    -0.00549178896471858,
                    -0.11937687546014786,
                    -0.0036517151165753603,
                    -0.04225236549973488,
                    0.007236494217067957,
                    -0.036030612885951996,
                    -0.04586479440331459,
                    -0.0046503436751663685,
                    0.01867925003170967,
                    0.0637897476553917,
                    -0.008568168617784977,
                    -0.03132196143269539,
                    -0.06917423009872437,
                    0.017381323501467705,
                    -0.02062326669692993,
                    0.1129346713423729,
                    0.012853560037910938,
                    -0.01209099218249321,
                    0.03823729604482651,
                    0.032744523137807846,
                    0.05682660639286041,
                    -0.02299862541258335,
                    0.03616956248879433,
                    0.05436718463897705,
                    -0.0031455892603844404,
                    -0.027362383902072906,
                    0.029535947367548943,
                    -0.08084724098443985,
                    -0.06496163457632065,
                    0.021421223878860474,
                    0.00040852403617464006,
                    0.09497901797294617,
                    0.02306075394153595,
                    0.061540793627500534,
                    -0.06398782134056091,
                    0.07702778279781342,
                    -0.008109687827527523,
                    -0.01583937741816044,
                    0.13801991939544678,
                    -0.029734665527939796,
                    -0.0094695333391428,
                    0.03896406665444374,
                    -0.10014491528272629,
                    0.05609004199504852,
                    0.11028552800416946,
                    -0.0389866977930069,
                    0.003788493573665619,
                    0.019275056198239326,
                    -0.0437069796025753,
                    -0.014871870167553425,
                    -0.03802154213190079,
                    0.010150662623345852,
                    -0.08706003427505493,
                    -0.12516722083091736,
                    0.18704883754253387,
                    -0.0728306844830513,
                    0.021223196759819984,
                    -0.042912036180496216,
                    0.005508820991963148,
                    0.13875441253185272,
                    -0.02515150047838688,
                    -0.013448335230350494,
                    0.03470717370510101
                ],
                "diffText": "diff --git a/lib/llvm/compiler.cpp b/lib/llvm/compiler.cpp\nindex 3c0ea1c5..8f5e5a34 100644\n--- a/lib/llvm/compiler.cpp\n+++ b/lib/llvm/compiler.cpp\n@@ -5179,113 +5179,115 @@ void Compiler::compile(const AST::TypeSection &TypeSec) noexcept {\n   if (Size == 0) {\n     return;\n   }\n-  Context->FunctionTypes.reserve(SubTypes.size());\n-  Context->FunctionWrappers.reserve(SubTypes.size());\n+  Context->FunctionTypes.reserve(Size);\n+  Context->FunctionWrappers.reserve(Size);\n \n   // Iterate and compile types.\n-  for (size_t I = 0; I < SubTypes.size(); ++I) {\n-    // TODO: GC - AOT: implement other composite types.\n-    if (!SubTypes[I].getCompositeType().isFunc()) {\n-      spdlog::error(\"GC proposal not supported for AOT currently.\");\n-      return;\n-    }\n-    const auto &FuncType = SubTypes[I].getCompositeType().getFuncType();\n-    const auto Name = fmt::format(\"t{}\"sv, Context->FunctionTypes.size());\n-\n-    // Check function type is unique\n-    {\n-      bool Unique = true;\n-      for (size_t J = 0; J < I; ++J) {\n-        const auto &OldFuncType = *Context->FunctionTypes[J];\n-        if (OldFuncType == FuncType) {\n-          Unique = false;\n-          Context->FunctionTypes.push_back(&OldFuncType);\n-          auto F = Context->FunctionWrappers[J];\n-          Context->FunctionWrappers.push_back(F);\n-          auto A = Context->LLModule.addAlias(WrapperTy, F, Name.c_str());\n-          A.setLinkage(LLVMExternalLinkage);\n-          A.setVisibility(LLVMProtectedVisibility);\n-          A.setDSOLocal(true);\n-          A.setDLLStorageClass(LLVMDLLExportStorageClass);\n-          break;\n+  for (size_t I = 0; I < Size; ++I) {\n+    if (SubTypes[I].getCompositeType().isFunc()) {\n+      const auto &FuncType = SubTypes[I].getCompositeType().getFuncType();\n+      const auto Name = fmt::format(\"t{}\"sv, Context->FunctionTypes.size());\n+\n+      // Check function type is unique\n+      {\n+        bool Unique = true;\n+        for (size_t J = 0; J < I; ++J) {\n+          if (const auto OldFuncType = Context->FunctionTypes[J]) {\n+            if (*OldFuncType == FuncType) {\n+              Unique = false;\n+              Context->FunctionTypes.push_back(OldFuncType);\n+              auto F = Context->FunctionWrappers[J];\n+              Context->FunctionWrappers.push_back(F);\n+              auto A = Context->LLModule.addAlias(WrapperTy, F, Name.c_str());\n+              A.setLinkage(LLVMExternalLinkage);\n+              A.setVisibility(LLVMProtectedVisibility);\n+              A.setDSOLocal(true);\n+              A.setDLLStorageClass(LLVMDLLExportStorageClass);\n+              break;\n+            }\n+          }\n+        }\n+        if (!Unique) {\n+          continue;\n         }\n       }\n-      if (!Unique) {\n-        continue;\n-      }\n-    }\n-\n-    // Create Wrapper\n-    auto F = Context->LLModule.addFunction(WrapperTy, LLVMExternalLinkage,\n-                                           Name.c_str());\n-    {\n-      F.setVisibility(LLVMProtectedVisibility);\n-      F.setDSOLocal(true);\n-      F.setDLLStorageClass(LLVMDLLExportStorageClass);\n-      F.addFnAttr(Context->NoStackArgProbe);\n-      F.addFnAttr(Context->StrictFP);\n-      F.addFnAttr(Context->UWTable);\n-      F.addParamAttr(0, Context->ReadOnly);\n-      F.addParamAttr(0, Context->NoAlias);\n-      F.addParamAttr(1, Context->NoAlias);\n-      F.addParamAttr(2, Context->NoAlias);\n-      F.addParamAttr(3, Context->NoAlias);\n-\n-      LLVM::Builder Builder(Context->LLContext);\n-      Builder.positionAtEnd(\n-          LLVM::BasicBlock::create(Context->LLContext, F, \"entry\"));\n \n-      auto FTy =\n-          toLLVMType(Context->LLContext, Context->ExecCtxPtrTy, FuncType);\n-      auto RTy = FTy.getReturnType();\n-      std::vector<LLVM::Type> FPTy(FTy.getNumParams());\n-      FTy.getParamTypes(FPTy);\n-\n-      const size_t ArgCount = FPTy.size() - 1;\n-      const size_t RetCount =\n-          RTy.isVoidTy() ? 0\n-                         : (RTy.isStructTy() ? RTy.getStructNumElements() : 1);\n-      auto ExecCtxPtr = F.getFirstParam();\n-      auto RawFunc = LLVM::FunctionCallee{\n-          FTy,\n-          Builder.createBitCast(ExecCtxPtr.getNextParam(), FTy.getPointerTo())};\n-      auto RawArgs = ExecCtxPtr.getNextParam().getNextParam();\n-      auto RawRets = RawArgs.getNextParam();\n-\n-      std::vector<LLVM::Value> Args;\n-      Args.reserve(FTy.getNumParams());\n-      Args.push_back(ExecCtxPtr);\n-      for (size_t J = 0; J < ArgCount; ++J) {\n-        auto ArgTy = FPTy[J + 1];\n-        auto VPtr = Builder.createConstInBoundsGEP1_64(Context->Int8Ty, RawArgs,\n-                                                       J * kValSize);\n-        auto Ptr = Builder.createBitCast(VPtr, ArgTy.getPointerTo());\n-        Args.push_back(Builder.createLoad(ArgTy, Ptr));\n-      }\n-\n-      auto Ret = Builder.createCall(RawFunc, Args);\n-      if (RTy.isVoidTy()) {\n-        // nothing to do\n-      } else if (RTy.isStructTy()) {\n-        auto Rets = unpackStruct(Builder, Ret);\n-        for (size_t J = 0; J < RetCount; ++J) {\n+      // Create Wrapper\n+      auto F = Context->LLModule.addFunction(WrapperTy, LLVMExternalLinkage,\n+                                             Name.c_str());\n+      {\n+        F.setVisibility(LLVMProtectedVisibility);\n+        F.setDSOLocal(true);\n+        F.setDLLStorageClass(LLVMDLLExportStorageClass);\n+        F.addFnAttr(Context->NoStackArgProbe);\n+        F.addFnAttr(Context->StrictFP);\n+        F.addFnAttr(Context->UWTable);\n+        F.addParamAttr(0, Context->ReadOnly);\n+        F.addParamAttr(0, Context->NoAlias);\n+        F.addParamAttr(1, Context->NoAlias);\n+        F.addParamAttr(2, Context->NoAlias);\n+        F.addParamAttr(3, Context->NoAlias);\n+\n+        LLVM::Builder Builder(Context->LLContext);\n+        Builder.positionAtEnd(\n+            LLVM::BasicBlock::create(Context->LLContext, F, \"entry\"));\n+\n+        auto FTy =\n+            toLLVMType(Context->LLContext, Context->ExecCtxPtrTy, FuncType);\n+        auto RTy = FTy.getReturnType();\n+        std::vector<LLVM::Type> FPTy(FTy.getNumParams());\n+        FTy.getParamTypes(FPTy);\n+\n+        const size_t ArgCount = FPTy.size() - 1;\n+        const size_t RetCount =\n+            RTy.isVoidTy()\n+                ? 0\n+                : (RTy.isStructTy() ? RTy.getStructNumElements() : 1);\n+        auto ExecCtxPtr = F.getFirstParam();\n+        auto RawFunc = LLVM::FunctionCallee{\n+            FTy, Builder.createBitCast(ExecCtxPtr.getNextParam(),\n+                                       FTy.getPointerTo())};\n+        auto RawArgs = ExecCtxPtr.getNextParam().getNextParam();\n+        auto RawRets = RawArgs.getNextParam();\n+\n+        std::vector<LLVM::Value> Args;\n+        Args.reserve(FTy.getNumParams());\n+        Args.push_back(ExecCtxPtr);\n+        for (size_t J = 0; J < ArgCount; ++J) {\n+          auto ArgTy = FPTy[J + 1];\n           auto VPtr = Builder.createConstInBoundsGEP1_64(Context->Int8Ty,\n-                                                         RawRets, J * kValSize);\n-          auto Ptr =\n-              Builder.createBitCast(VPtr, Rets[J].getType().getPointerTo());\n-          Builder.createStore(Rets[J], Ptr);\n+                                                         RawArgs, J * kValSize);\n+          auto Ptr = Builder.createBitCast(VPtr, ArgTy.getPointerTo());\n+          Args.push_back(Builder.createLoad(ArgTy, Ptr));\n         }\n-      } else {\n-        auto VPtr =\n-            Builder.createConstInBoundsGEP1_64(Context->Int8Ty, RawRets, 0);\n-        auto Ptr = Builder.createBitCast(VPtr, Ret.getType().getPointerTo());\n-        Builder.createStore(Ret, Ptr);\n+\n+        auto Ret = Builder.createCall(RawFunc, Args);\n+        if (RTy.isVoidTy()) {\n+          // nothing to do\n+        } else if (RTy.isStructTy()) {\n+          auto Rets = unpackStruct(Builder, Ret);\n+          for (size_t J = 0; J < RetCount; ++J) {\n+            auto VPtr = Builder.createConstInBoundsGEP1_64(\n+                Context->Int8Ty, RawRets, J * kValSize);\n+            auto Ptr =\n+                Builder.createBitCast(VPtr, Rets[J].getType().getPointerTo());\n+            Builder.createStore(Rets[J], Ptr);\n+          }\n+        } else {\n+          auto VPtr =\n+              Builder.createConstInBoundsGEP1_64(Context->Int8Ty, RawRets, 0);\n+          auto Ptr = Builder.createBitCast(VPtr, Ret.getType().getPointerTo());\n+          Builder.createStore(Ret, Ptr);\n+        }\n+        Builder.createRetVoid();\n       }\n-      Builder.createRetVoid();\n+      // Copy wrapper, param and return lists to module instance.\n+      Context->FunctionTypes.push_back(&FuncType);\n+      Context->FunctionWrappers.push_back(F);\n+    } else {\n+      Context->FunctionTypes.push_back(nullptr);\n+      Context->FunctionWrappers.push_back(LLVM::Value());\n     }\n-    // Copy wrapper, param and return lists to module instance.\n-    Context->FunctionTypes.push_back(&FuncType);\n-    Context->FunctionWrappers.push_back(F);\n   }\n }\n "
            }
        },
        "relation2": {
            "identity": 23146,
            "start": 11177,
            "end": 11176,
            "type": "FILE_MODIFICATION",
            "properties": {}
        },
        "twoEdgesAway": {
            "identity": 11176,
            "labels": [
                "SourceFile"
            ],
            "properties": {
                "path": "lib/llvm/compiler.cpp"
            }
        }
    },
    {
        "baseNode": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        },
        "relation1": {
            "identity": 23143,
            "start": 11168,
            "end": 9299,
            "type": "PROJECT_VULNERABILITIES",
            "properties": {}
        },
        "oneEdgeAway": {
            "identity": 9299,
            "labels": [
                "Project"
            ],
            "properties": {
                "projectSource": "oss-fuzz",
                "projectName": "WasmEdge"
            }
        },
        "relation2": null,
        "twoEdgesAway": {
            "identity": null,
            "labels": null,
            "properties": null
        }
    },
    {
        "baseNode": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        },
        "relation1": {
            "identity": 23142,
            "start": 11168,
            "end": 11175,
            "type": "CRASH_PATCH",
            "properties": {}
        },
        "oneEdgeAway": {
            "identity": 11175,
            "labels": [
                "CrashReport"
            ],
            "properties": {
                "sanitizer": "asan",
                "report_content": "=================================================================\n==1==ERROR: AddressSanitizer: container-overflow on address 0x602000000698 at pc 0x7f69f2dc7510 bp 0x7fff6fd90c30 sp 0x7fff6fd90c28\nREAD of size 8 at 0x602000000698 thread T0\nSCARINESS: 23 (8-byte-read-container-overflow)\n    #0 0x7f69f2dc750f in WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::FunctionSection const&, WasmEdge::AST::CodeSection const&) /src/WasmEdge/lib/llvm/compiler.cpp:5443:29\n    #1 0x7f69f2dbb391 in WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::Module const&) /src/WasmEdge/lib/llvm/compiler.cpp:5076:3\n    #2 0x7f69f2871572 in WasmEdge::Driver::FuzzTool(unsigned char const*, unsigned long) /src/WasmEdge/lib/driver/fuzzTool.cpp:44:27\n    #3 0x316f8d in ExecuteFilesOnyByOne /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:255:7\n    #4 0x316d88 in LLVMFuzzerRunDriver /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c\n    #5 0x31693d in main /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:311:10\n    #6 0x7f69f1fac082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: eebe5d5f4b608b8a53ec446b63981bba373ca0ca)\n    #7 0x257ebd in _start (/out/wasmedge-fuzztool+0x257ebd)\n\nDEDUP_TOKEN: WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::FunctionSection const&, WasmEdge::AST::CodeSection const&)--WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::Module const&)--WasmEdge::Driver::FuzzTool(unsigned char const*, unsigned long)\n0x602000000698 is located 8 bytes inside of 16-byte region [0x602000000690,0x6020000006a0)\nallocated by thread T0 here:\n    #0 0x2d92f6 in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:69:3\n    #1 0x7f69f30d54d4 in operator new(unsigned long) stdlib_new_delete.cpp\n    #2 0x7f69f2dbe82a in WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::TypeSection const&) /src/WasmEdge/lib/llvm/compiler.cpp:5182:26\n    #3 0x7f69f2dbb35d in WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::Module const&) /src/WasmEdge/lib/llvm/compiler.cpp:5066:3\n    #4 0x7f69f2871572 in WasmEdge::Driver::FuzzTool(unsigned char const*, unsigned long) /src/WasmEdge/lib/driver/fuzzTool.cpp:44:27\n    #5 0x316f8d in ExecuteFilesOnyByOne /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:255:7\n\nDEDUP_TOKEN: malloc--operator new(unsigned long)--WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::TypeSection const&)\nHINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.\nIf you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.\nSUMMARY: AddressSanitizer: container-overflow /src/WasmEdge/lib/llvm/compiler.cpp:5443:29 in WasmEdge::LLVM::Compiler::compile(WasmEdge::AST::FunctionSection const&, WasmEdge::AST::CodeSection const&)\nShadow bytes around the buggy address:\n  0x0c047fff8080: fa fa 04 fa fa fa fd fa fa fa fd fa fa fa fd fa\n  0x0c047fff8090: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa\n  0x0c047fff80a0: fa fa 04 fa fa fa 04 fa fa fa 00 04 fa fa 04 fa\n  0x0c047fff80b0: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa\n  0x0c047fff80c0: fa fa fd fd fa fa 00 fa fa fa 00 00 fa fa 00 fa\n=>0x0c047fff80d0: fa fa fc[fc]fa fa fc fc fa fa fa fa fa fa fa fa\n  0x0c047fff80e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff80f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==1==ABORTING\n\nReturn Code: 1\n",
                "report_embeddings": [
                    0.03500578925013542,
                    0.06541085243225098,
                    -0.08760328590869904,
                    -0.011239958927035332,
                    0.0006236399058252573,
                    -0.02086501009762287,
                    -0.02051878161728382,
                    -0.005630740895867348,
                    0.0696193054318428,
                    0.02208511158823967,
                    -0.010966168716549873,
                    0.00017344392836093903,
                    0.0007463861256837845,
                    0.01773037761449814,
                    0.02375119924545288,
                    -0.03612300381064415,
                    0.09258729964494705,
                    0.013188098557293415,
                    -0.018966902047395706,
                    0.05440986528992653,
                    -0.08072037994861603,
                    0.029326580464839935,
                    -0.025033652782440186,
                    -0.037320494651794434,
                    0.0030064834281802177,
                    0.044284388422966,
                    -0.1379416584968567,
                    -0.05432729423046112,
                    -0.02041725069284439,
                    -0.05929156020283699,
                    -0.06445714831352234,
                    -0.13540057837963104,
                    -0.0562199205160141,
                    -0.04303162172436714,
                    0.0014742673374712467,
                    0.014708900824189186,
                    -0.036384984850883484,
                    -0.0213911235332489,
                    -0.007960191927850246,
                    0.07437796145677567,
                    -0.017747193574905396,
                    -0.046504028141498566,
                    0.026284940540790558,
                    0.013992554508149624,
                    -0.06626015156507492,
                    0.026464499533176422,
                    -0.013850530609488487,
                    -0.0488845556974411,
                    0.023112434893846512,
                    -0.014090168289840221,
                    -0.053282417356967926,
                    -0.026287637650966644,
                    -0.01176498830318451,
                    -0.032146550714969635,
                    -0.056486576795578,
                    0.011229918338358402,
                    0.003475508652627468,
                    0.04344740882515907,
                    -0.053061485290527344,
                    0.055163826793432236,
                    0.00023244100157171488,
                    -0.06937797367572784,
                    0.045435674488544464,
                    0.0021870334167033434,
                    -0.04403671622276306,
                    0.05654256045818329,
                    0.08347008377313614,
                    0.10079700499773026,
                    -0.008716131560504436,
                    -0.024348560720682144,
                    0.044445428997278214,
                    0.14215555787086487,
                    -0.05143111199140549,
                    -0.13984444737434387,
                    -0.08446180820465088,
                    0.024202564731240273,
                    -0.058674365282058716,
                    0.02833932638168335,
                    -0.011480816639959812,
                    -0.11087001115083694,
                    -0.047448884695768356,
                    -0.011094188317656517,
                    0.02191108837723732,
                    0.03663774952292442,
                    0.06708186864852905,
                    0.055215589702129364,
                    0.021901249885559082,
                    -0.020862799137830734,
                    0.028259258717298508,
                    0.026404879987239838,
                    0.04998376592993736,
                    -0.083677738904953,
                    0.009774132631719112,
                    -0.018120551481842995,
                    -0.012302637100219727,
                    0.029569275677204132,
                    0.03191963955760002,
                    -0.026070956140756607,
                    -0.04042169079184532,
                    0.0007977250497788191,
                    -0.03665615990757942,
                    -0.027500014752149582,
                    -0.004424662794917822,
                    0.011877740733325481,
                    -0.024349384009838104,
                    0.027158157899975777,
                    -0.03690230846405029,
                    0.04483174532651901,
                    -0.03168312832713127,
                    -0.023406989872455597,
                    0.029772594571113586,
                    -0.032043516635894775,
                    -0.04381391033530235,
                    0.08746585249900818,
                    0.051354989409446716,
                    -0.062085337936878204,
                    -0.038544707000255585,
                    -0.008615568280220032,
                    0.005764596164226532,
                    0.08323240280151367,
                    0.08965941518545151,
                    0.00562436506152153,
                    -0.013007600791752338,
                    -0.018073368817567825,
                    0.01334528811275959,
                    -0.004602690227329731,
                    0.01731988787651062,
                    -0.0063893916085362434,
                    0.04287785664200783,
                    0.028787370771169662,
                    -0.04028381034731865,
                    0.04179354012012482,
                    0.056353889405727386,
                    0.016425305977463722,
                    -0.03390497714281082,
                    0.03538995981216431,
                    0.06926234066486359,
                    -0.04376499354839325,
                    0.01025807298719883,
                    0.0009030867367982864,
                    0.03085852414369583,
                    -0.03833777457475662,
                    -0.049323245882987976,
                    -0.01210680603981018,
                    0.007558273151516914,
                    -0.053471263498067856,
                    0.07657528668642044,
                    0.033198900520801544,
                    -0.010873645544052124,
                    0.04722940921783447,
                    0.00018227525288239121,
                    -0.04021213948726654,
                    -0.0973302498459816,
                    -0.04443833976984024,
                    -0.0011758687905967236,
                    -0.035199154168367386,
                    0.02905132994055748,
                    -0.00023582112044095993,
                    0.03876256197690964,
                    0.02299966849386692,
                    0.0362439826130867,
                    0.10236194729804993,
                    -0.0018347520381212234,
                    0.13418373465538025,
                    0.013789398595690727,
                    0.10737919807434082,
                    -0.08289606869220734,
                    0.0003058542497456074,
                    0.017745034769177437,
                    0.0012369677424430847,
                    -0.03807747736573219,
                    0.014151861891150475,
                    0.00023338058963418007,
                    -0.039554234594106674,
                    -0.010447635315358639,
                    -0.027950484305620193,
                    -0.050535619258880615,
                    0.04961635172367096,
                    0.03707650303840637,
                    0.025625813752412796,
                    -0.009940695948898792,
                    0.065182164311409,
                    -0.021028868854045868,
                    -0.04584868997335434,
                    -0.019031716510653496,
                    0.03621234372258186,
                    -0.06057541072368622,
                    -0.08307881653308868,
                    -0.028940889984369278,
                    -0.012534000910818577,
                    0.010909736156463623,
                    -0.0355401337146759,
                    0.0711832270026207,
                    -0.034454863518476486,
                    -0.12447653710842133,
                    -0.05013452097773552,
                    0.010048434138298035,
                    0.02775748074054718,
                    -0.008268776349723339,
                    -0.1627272218465805,
                    -0.07443385571241379,
                    -0.007953108288347721,
                    0.0335841029882431,
                    -0.043244969099760056,
                    -0.006003101356327534,
                    -0.07076676189899445,
                    0.11681301146745682,
                    -0.023301612585783005,
                    0.10519231855869293,
                    0.007188096642494202,
                    0.045567404478788376,
                    0.022054927423596382,
                    0.06265919655561447,
                    0.0016537336632609367,
                    0.04180993139743805,
                    -0.08005765080451965,
                    0.08766142278909683,
                    -0.03693310171365738,
                    -0.07124084234237671,
                    0.018170082941651344,
                    -0.06948702037334442,
                    -0.029759719967842102,
                    -0.060251835733652115,
                    -0.06216457858681679,
                    0.0417105033993721,
                    0.008795058354735374,
                    -0.0440887026488781,
                    0.0329548716545105,
                    0.06023669242858887,
                    0.048618681728839874,
                    -0.05717242509126663,
                    -0.004232964478433132,
                    -0.010315068997442722,
                    0.05030721053481102,
                    0.02985857054591179,
                    -0.028640154749155045,
                    0.11970771104097366,
                    0.03303239494562149,
                    -0.04267250746488571,
                    -0.023976009339094162,
                    0.04300612583756447,
                    -0.014942502602934837,
                    -0.007985961623489857,
                    -0.0020331782288849354,
                    0.10752549022436142,
                    -0.09034351259469986,
                    -0.09843549877405167,
                    0.09036977589130402,
                    -0.03825702145695686,
                    0.043114207684993744,
                    0.010907617397606373,
                    -0.006684913765639067,
                    0.12030065804719925,
                    0.02856363356113434,
                    0.061772383749485016,
                    -0.003385615535080433
                ],
                "report_type": "Container-overflow READ 8",
                "severity": "Medium"
            }
        },
        "relation2": null,
        "twoEdgesAway": {
            "identity": null,
            "labels": null,
            "properties": null
        }
    },
    {
        "baseNode": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        },
        "relation1": {
            "identity": 23141,
            "start": 11168,
            "end": 11173,
            "type": "PATCHING_COMMIT",
            "properties": {}
        },
        "oneEdgeAway": {
            "identity": 11173,
            "labels": [
                "Commit"
            ],
            "properties": {
                "message": "[AOT] Skip gc-types in function generator (#3244)\n\nSigned-off-by: Shen-Ta Hsieh <beststeve@secondstate.io>",
                "sha": "62ce0eef5e9f2b4dd390ebbefbb430a95c60af64",
                "repo": "WasmEdge",
                "encoding": "UTF-8",
                "authored_date": 1708974193,
                "committer_tz_offset": -28800,
                "author_tz_offset": -28800,
                "committed_date": 1708974193
            }
        },
        "relation2": null,
        "twoEdgesAway": {
            "identity": null,
            "labels": null,
            "properties": null
        }
    },
    {
        "baseNode": {
            "identity": 11168,
            "labels": [
                "VulnerabilityPatch"
            ],
            "properties": {
                "vulnerabilityIdentifier": "ossfuzz-WasmEdge-67006"
            }
        },
        "relation1": {
            "identity": 23135,
            "start": 11168,
            "end": 11169,
            "type": "VULNERABLE_COMMIT",
            "properties": {}
        },
        "oneEdgeAway": {
            "identity": 11169,
            "labels": [
                "Commit"
            ],
            "properties": {
                "message": "[Misc] Only build wasi_nn_rpc when WASMEDGE_BUILD_WASI_NN_RPC is ON (#3242)\n\nSigned-off-by: hydai <z54981220@gmail.com>",
                "sha": "4e313279a9eca6ae6ce2fa316427a7ea78f5dacd",
                "repo": "WasmEdge",
                "encoding": "UTF-8",
                "authored_date": 1708966542,
                "committer_tz_offset": -28800,
                "author_tz_offset": -28800,
                "committed_date": 1708966542
            }
        },
        "relation2": null,
        "twoEdgesAway": {
            "identity": null,
            "labels": null,
            "properties": null
        }
    }
]