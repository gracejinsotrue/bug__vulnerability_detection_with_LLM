import json
from neo4j import GraphDatabase

# Initialize the connection to the Neo4j database
uri = "neo4j://beatty.unfiltered.seclab.cs.ucsb.edu:7689"  # Update with your Neo4j URI
username = "neo4j"  # Update with your Neo4j username
password = "!!Shellphish!!"  # Update with your Neo4j password

driver = GraphDatabase.driver(uri, auth=(username, password))

# Load the JSON file with error handling
json_file_path = 'cypherjson1.json'

try:
    with open(json_file_path, 'r', encoding='utf-8') as f:
        cypherjson1 = json.load(f)
except json.JSONDecodeError as e:
    print(f"JSON decode error: {e}")
    with open(json_file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        if e.lineno <= len(lines):
            print(f"Problematic line {e.lineno}: {lines[e.lineno - 1]}")
    raise

# Extract the values for vulnerabilityIdentifier and id(m1)
vulnerability_identifiers = []
file_modification_ids = []

# Extracting values assuming the JSON structure you provided
for item in cypherjson1['start']:
    vulnerability_identifier = item['properties']['vulnerabilityIdentifier']
    vulnerability_identifiers.append(vulnerability_identifier)

for item in cypherjson1['end']:
    file_mod_id = item['identity']
    file_modification_ids.append(file_mod_id)

# Function to execute the Cypher query with parameters
def execute_query(vulnerability_id, file_mod_id):
    query = """
    MATCH (n:VulnerabilityPatch {vulnerabilityIdentifier: $vulnerability_id})
    OPTIONAL MATCH (n)-[r1]-(m1)
    WITH n, r1, m1
    OPTIONAL MATCH (m1)-[r2]-(m2)
    WHERE m1:FileModification AND id(m1) = $file_mod_id
    RETURN n, r1, m1, r2, m2
    """
    with driver.session() as session:
        result = session.run(query, vulnerability_id=vulnerability_id, file_mod_id=file_mod_id)
        for record in result:
            print(record)

# Iterate over the lists and execute the query for each combination of values
for vulnerability_id in vulnerability_identifiers:
    for file_mod_id in file_modification_ids:
        execute_query(vulnerability_id, file_mod_id)

# Close the connection to the Neo4j database
driver.close()
