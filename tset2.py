import os
os.environ["LANGCHAIN_TRACING_VS"] = "True"
from langchain.tools import tool
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_openai import ChatOpenAI

"""
"define schema for custom tools using @tool on peethon"

@tool 
def add (a: int, b: int)-> int:
    " adds a and b"
    return a + b
@tool 
def multiply (a: int, b: int)-> int:
    "multiplies a and b"
    return a * b
tools = [add, multiply]

"""

#docstrings are crucial as they will be passed along to the model
class Add (BaseModel):
    """add the two integers together"""
    a: int = Field(..., description="First integer")
    b: int = Field(..., description="Second integer")

class Multiply (BaseModel):
    """multiply the two integers together"""
    a: int = Field(..., description="First integer")
    b: int = Field(..., description="Second integer")

tools = [ Add, Multiply]

llm = ChatOpenAI(model = "gpt-3.5-turbo")
llm_openai= llm.bind_tools(tools)

query = "what is 3 * 12? Also, what is 11+49?"
result_openai = llm_with_tools.invoke (query)
result_openai
result_openai.tool_calls
