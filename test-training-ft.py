import os
from openai import OpenAI

# Set your OpenAI API key here
api_key = "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"
client = OpenAI(api_key=api_key)

try:
    # Uncomment and run this section if you haven't already uploaded the files
    # training_response = client.files.create(
    #     file=open("training.jsonl", "rb"),
    #     purpose="fine-tune"
    # )
    # validation_response = client.files.create(
    #     file=open("validation.jsonl", "rb"),
    #     purpose="fine-tune"
    # )

    # Uncomment and update the file IDs with the actual file IDs returned from the upload
    # fine_tune_response = client.fine_tuning.jobs.create(
    #     training_file="file-pjOT76b4xznTuJU3Qhavgg7u",
    #     validation_file="file-XavvPDOanmXhMkJnh7u4sw79",
    #     model="gpt-3.5-turbo"
    # )

    # List 5 fine-tuning jobs
    fine_tuning_jobs = client.fine_tuning.jobs.list(limit=5)
    print(fine_tuning_jobs)

    # Retrieve the state of a fine-tune job
    fine_tune_job_id = "ftjob-UwPlTOR5949HefqOfaNPGcnA"
    fine_tune_job = client.fine_tuning.jobs.retrieve(fine_tune_job_id)
    print(fine_tune_job)

    # Check if the fine-tuning job is completed
    if fine_tune_job.status == "succeeded":
        model_id = fine_tune_job.fine_tuned_model
        model_info = client.models.retrieve(model_id)
        token_usage = model_info.usage if hasattr(model_info, 'usage') else {}
        if token_usage:
            print("Tokens used:")
            for key, value in token_usage.items():
                print(f"{key}: {value}")
        else:
            print("Token usage information not available in the response.")
    else:
        print("Fine-tuning job has not completed yet. Current status:", fine_tune_job.status)

except Exception as e:
    print("An error occurred:", e)
